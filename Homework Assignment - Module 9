{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "90e79687",
   "metadata": {
    "id": "FtWa9AS2N33Z",
    "papermill": {
     "duration": 0.003727,
     "end_time": "2025-05-08T16:31:35.647019",
     "exception": false,
     "start_time": "2025-05-08T16:31:35.643292",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "##**Homework Assignment - Module 9: Pipelines - Your Foundation for Mastering Advanced Machine Learning Models**\n",
    "\n",
    "**Objective:** To solidify your understanding of pipelines and demonstrate your ability to build robust, well-structured pipelines that are ready for advanced machine learning models. This assignment is designed to assess your coding skills, critical thinking, and ability to apply pipeline concepts to real-world datasets.\n",
    "\n",
    "**Instructions:**\n",
    "\n",
    "1. **Dataset Selection:**\n",
    "    - **Primary Dataset:** Continue using the Iowa Housing dataset. This dataset will be your primary focus for completing the core tasks.\n",
    "    - **Secondary Datasets:** Choose *at least one* additional dataset from the list below (or another dataset of your choice, subject to approval):\n",
    "        - **Adult Income Dataset (UCI Machine Learning Repository)**: A classic dataset for classification, where the goal is to predict whether an individual's income is above or below $50,000 based on demographic and employment features.\n",
    "        - **California Housing Dataset (sklearn.datasets)**: A regression dataset predicting median house values in California districts.\n",
    "    - **Rationale:** Exploring these additional datasets will help you:\n",
    "        - Generalize your pipeline construction skills to new problems.\n",
    "        - Compare the impact of pipelines on different data types and model objectives.\n",
    "        - Appreciate the versatility of pipelines for both regression and classification tasks.\n",
    "\n",
    "2. **Core Tasks - Iowa Housing Dataset:**\n",
    "\n",
    "    - **Pipeline Construction:** Build a comprehensive pipeline for the Iowa Housing dataset, including the following:\n",
    "        - **Data Cleaning:** Handle missing values using `SimpleImputer`. Explore different imputation strategies (e.g., 'median', 'mean', or 'most_frequent') for numerical and categorical features. Justify your choices based on data characteristics.\n",
    "        - **Feature Scaling:** Use `StandardScaler` to scale numerical features after imputation. Explain why feature scaling is important.\n",
    "        - **Categorical Encoding:** Use `OneHotEncoder` or `OrdinalEncoder` (choose one based on the nature of the categorical features) to encode your categorical features. Experiment with different `handle_unknown` strategies in `OneHotEncoder`. Discuss the implications of each strategy.\n",
    "        - **Model Selection:** Choose a model suitable for regression (e.g., `RandomForestRegressor`, `LinearRegression`, or potentially `GradientBoostingRegressor` as a preview for future modules). Provide a rationale for your model choice.\n",
    "    - **Hyperparameter Tuning:**\n",
    "        - Use either `RandomizedSearchCV` or `GridSearchCV` (choose one) to tune the hyperparameters of your model *and* any relevant preprocessing steps within your pipeline (e.g., different `SimpleImputer` strategies). Ensure that hyperparameter tuning is performed *inside* the pipeline to prevent data leakage. Explain the process and justify your hyperparameter search space.\n",
    "    - **Model Evaluation:** Evaluate your final pipeline's performance using appropriate metrics like Mean Absolute Error (MAE) or Root Mean Squared Error (RMSE). Interpret the results and discuss the model's strengths and limitations."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81b6cb0a",
   "metadata": {
    "papermill": {
     "duration": 0.002201,
     "end_time": "2025-05-08T16:31:35.652097",
     "exception": false,
     "start_time": "2025-05-08T16:31:35.649896",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "##  Iowa Housing Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bb235c05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-08T16:31:35.658793Z",
     "iopub.status.busy": "2025-05-08T16:31:35.658025Z",
     "iopub.status.idle": "2025-05-08T16:31:40.077852Z",
     "shell.execute_reply": "2025-05-08T16:31:40.077027Z"
    },
    "papermill": {
     "duration": 4.425053,
     "end_time": "2025-05-08T16:31:40.079550",
     "exception": false,
     "start_time": "2025-05-08T16:31:35.654497",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import kagglehub\n",
    "\n",
    "# scipy.stats provides functions for statistical analysis, including randint for random integer generation.\n",
    "from scipy.stats import randint\n",
    "\n",
    "# BaseEstimator and TransformerMixin are base classes for creating custom transformers in scikit-learn.\n",
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "\n",
    "# ColumnTransformer is used to apply different transformers to different columns of a dataset.\n",
    "from sklearn.compose import ColumnTransformer\n",
    "\n",
    "# RandomForestRegressor is a machine learning model for regression tasks.\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "# SimpleImputer is used to fill missing values in a dataset.\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "# mean_absolute_error is a metric to evaluate regression models.\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "\n",
    "# train_test_split is used to split data into training and testing sets.\n",
    "# RandomizedSearchCV and GridSearchCV are used for hyperparameter tuning.\n",
    "from sklearn.model_selection import train_test_split, RandomizedSearchCV, GridSearchCV\n",
    "\n",
    "# Pipeline is used to chain together multiple data transformations and a final estimator.\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "# StandardScaler is used for feature scaling, and OneHotEncoder is used for encoding categorical features.\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "\n",
    "# PCA is used for dimensionality reduction.\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "# pickle is used for saving and loading Python objects, like trained models.\n",
    "import pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "54b8fa80",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-08T16:31:40.086521Z",
     "iopub.status.busy": "2025-05-08T16:31:40.085887Z",
     "iopub.status.idle": "2025-05-08T16:31:41.125785Z",
     "shell.execute_reply": "2025-05-08T16:31:41.124768Z"
    },
    "papermill": {
     "duration": 1.0449,
     "end_time": "2025-05-08T16:31:41.127273",
     "exception": false,
     "start_time": "2025-05-08T16:31:40.082373",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "af4caa79a9294286aaa9e862ab7de88b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox(children=(HTML(value='<center> <img\\nsrc=https://www.kaggle.com/static/images/site-logo.png\\nalt=\\'Kaggleâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "------------------------------------------------------\n",
      "\n",
      "Basic Pipeline - MAE: 18845.318978310504\n",
      "\n",
      "Basic Pipeline Constructed and Evaluated Successfully!\n",
      "\n",
      "------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "# --- Load Iowa Housing Data ---\n",
    "\n",
    "# Log in to Kaggle\n",
    "kagglehub.login()\n",
    "# Download the dataset to a local path\n",
    "dansbecker_home_data_for_ml_course_path = kagglehub.dataset_download('dansbecker/home-data-for-ml-course')\n",
    "# Create the full file path\n",
    "iowa_file_path = dansbecker_home_data_for_ml_course_path + '/train.csv'\n",
    "# Load the data into a pandas DataFrame\n",
    "iowa_data = pd.read_csv(iowa_file_path)\n",
    "\n",
    "# --- Data Preparation ---\n",
    "# Define the list of features to use\n",
    "features_to_use = ['LotArea', 'OverallQual', 'YearBuilt', 'TotalBsmtSF', 'GrLivArea',\n",
    "                   'GarageArea', 'SalePrice', 'Neighborhood', 'BldgType', 'HouseStyle',\n",
    "                   'ExterQual', 'KitchenQual', 'FireplaceQu']\n",
    "# Create a subset of the data with the selected features\n",
    "iowa_data_subset = iowa_data[features_to_use].copy()\n",
    "\n",
    "# Extract the target variable ('SalePrice')\n",
    "y = iowa_data_subset['SalePrice']\n",
    "\n",
    "# Extract the features (drop 'SalePrice' from the features)\n",
    "X = iowa_data_subset.drop('SalePrice', axis=1)\n",
    "\n",
    "# Get the names of categorical columns\n",
    "categorical_cols = X.select_dtypes(include='object').columns\n",
    "# Get the names of numerical columns\n",
    "numerical_cols = X.select_dtypes(exclude='object').columns\n",
    "\n",
    "# Split data into training and validation sets\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=0)\n",
    "\n",
    "# --- Basic Pipeline Construction Without Scaling ---\n",
    "\n",
    "# Create a transformer to impute missing numerical values with the median\n",
    "numerical_transformer_basic = SimpleImputer(strategy='median')\n",
    "\n",
    "# Create a transformer to one-hot encode categorical features\n",
    "categorical_transformer_basic = OneHotEncoder(handle_unknown='ignore', sparse_output=False)\n",
    "\n",
    "# Create a ColumnTransformer to apply different transformers to different columns\n",
    "preprocessor_basic = ColumnTransformer(transformers=[\n",
    "                         ('num', numerical_transformer_basic, numerical_cols),\n",
    "                         # Apply numerical transformer to numerical columns\n",
    "                         ('cat', categorical_transformer_basic, categorical_cols)])\n",
    "                         # Apply categorical transformer to categorical columns\n",
    "\n",
    "# Create a pipeline with preprocessor and model steps\n",
    "pipeline_basic = Pipeline(steps=\n",
    "                        [('preprocessor', preprocessor_basic),\n",
    "                         ('model'       , RandomForestRegressor(n_estimators=100,\n",
    "                                                                random_state=0))])\n",
    "                                          # Use RandomForestRegressor as the model\n",
    "\n",
    "# --- Train and Evaluate Basic Pipeline ---\n",
    "\n",
    "# Train the pipeline on the training data\n",
    "pipeline_basic.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions on the validation data\n",
    "predictions_basic = pipeline_basic.predict(X_val)\n",
    "\n",
    "# Calculate the MAE\n",
    "mae_basic = mean_absolute_error(y_val, predictions_basic)\n",
    "\n",
    "print(\"\\n------------------------------------------------------\")\n",
    "# Print the MAE of the basic pipeline\n",
    "print(\"\\nBasic Pipeline - MAE:\", mae_basic)\n",
    "# Confirmation message\n",
    "print(\"\\nBasic Pipeline Constructed and Evaluated Successfully!\")\n",
    "print(\"\\n------------------------------------------------------\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f269b82e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-08T16:31:41.135041Z",
     "iopub.status.busy": "2025-05-08T16:31:41.134575Z",
     "iopub.status.idle": "2025-05-08T16:31:42.359851Z",
     "shell.execute_reply": "2025-05-08T16:31:42.358889Z"
    },
    "papermill": {
     "duration": 1.230818,
     "end_time": "2025-05-08T16:31:42.361393",
     "exception": false,
     "start_time": "2025-05-08T16:31:41.130575",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Features Before Transformation:\n",
      "0: LotArea (int64)\n",
      "1: OverallQual (int64)\n",
      "2: YearBuilt (int64)\n",
      "3: TotalBsmtSF (int64)\n",
      "4: GrLivArea (int64)\n",
      "5: GarageArea (int64)\n",
      "6: Neighborhood (object)\n",
      "7: BldgType (object)\n",
      "8: HouseStyle (object)\n",
      "9: ExterQual (object)\n",
      "10: KitchenQual (object)\n",
      "11: FireplaceQu (object)\n",
      "Total number of features before encoding: 12\n",
      "\n",
      "Features After Encoding (Before PCA):\n",
      "0: num__pca0 (float64)\n",
      "1: num__pca1 (float64)\n",
      "2: num__pca2 (float64)\n",
      "3: num__pca3 (float64)\n",
      "4: num__pca4 (float64)\n",
      "5: cat__Neighborhood_Blmngtn (float64)\n",
      "6: cat__Neighborhood_Blueste (float64)\n",
      "7: cat__Neighborhood_BrDale (float64)\n",
      "8: cat__Neighborhood_BrkSide (float64)\n",
      "9: cat__Neighborhood_ClearCr (float64)\n",
      "10: cat__Neighborhood_CollgCr (float64)\n",
      "11: cat__Neighborhood_Crawfor (float64)\n",
      "12: cat__Neighborhood_Edwards (float64)\n",
      "13: cat__Neighborhood_Gilbert (float64)\n",
      "14: cat__Neighborhood_IDOTRR (float64)\n",
      "15: cat__Neighborhood_MeadowV (float64)\n",
      "16: cat__Neighborhood_Mitchel (float64)\n",
      "17: cat__Neighborhood_NAmes (float64)\n",
      "18: cat__Neighborhood_NPkVill (float64)\n",
      "19: cat__Neighborhood_NWAmes (float64)\n",
      "20: cat__Neighborhood_NoRidge (float64)\n",
      "21: cat__Neighborhood_NridgHt (float64)\n",
      "22: cat__Neighborhood_OldTown (float64)\n",
      "23: cat__Neighborhood_SWISU (float64)\n",
      "24: cat__Neighborhood_Sawyer (float64)\n",
      "25: cat__Neighborhood_SawyerW (float64)\n",
      "26: cat__Neighborhood_Somerst (float64)\n",
      "27: cat__Neighborhood_StoneBr (float64)\n",
      "28: cat__Neighborhood_Timber (float64)\n",
      "29: cat__Neighborhood_Veenker (float64)\n",
      "30: cat__BldgType_1Fam (float64)\n",
      "31: cat__BldgType_2fmCon (float64)\n",
      "32: cat__BldgType_Duplex (float64)\n",
      "33: cat__BldgType_Twnhs (float64)\n",
      "34: cat__BldgType_TwnhsE (float64)\n",
      "35: cat__HouseStyle_1.5Fin (float64)\n",
      "36: cat__HouseStyle_1.5Unf (float64)\n",
      "37: cat__HouseStyle_1Story (float64)\n",
      "38: cat__HouseStyle_2.5Fin (float64)\n",
      "39: cat__HouseStyle_2.5Unf (float64)\n",
      "40: cat__HouseStyle_2Story (float64)\n",
      "41: cat__HouseStyle_SFoyer (float64)\n",
      "42: cat__HouseStyle_SLvl (float64)\n",
      "43: cat__ExterQual_Ex (float64)\n",
      "44: cat__ExterQual_Fa (float64)\n",
      "45: cat__ExterQual_Gd (float64)\n",
      "46: cat__ExterQual_TA (float64)\n",
      "47: cat__KitchenQual_Ex (float64)\n",
      "48: cat__KitchenQual_Fa (float64)\n",
      "49: cat__KitchenQual_Gd (float64)\n",
      "50: cat__KitchenQual_TA (float64)\n",
      "51: cat__FireplaceQu_Ex (float64)\n",
      "52: cat__FireplaceQu_Fa (float64)\n",
      "53: cat__FireplaceQu_Gd (float64)\n",
      "54: cat__FireplaceQu_Po (float64)\n",
      "55: cat__FireplaceQu_TA (float64)\n",
      "56: cat__FireplaceQu_nan (float64)\n",
      "0: num__pca0 (float64)\n",
      "1: num__pca1 (float64)\n",
      "2: num__pca2 (float64)\n",
      "3: num__pca3 (float64)\n",
      "4: num__pca4 (float64)\n",
      "5: cat__Neighborhood_Blmngtn (float64)\n",
      "6: cat__Neighborhood_Blueste (float64)\n",
      "7: cat__Neighborhood_BrDale (float64)\n",
      "8: cat__Neighborhood_BrkSide (float64)\n",
      "9: cat__Neighborhood_ClearCr (float64)\n",
      "10: cat__Neighborhood_CollgCr (float64)\n",
      "11: cat__Neighborhood_Crawfor (float64)\n",
      "12: cat__Neighborhood_Edwards (float64)\n",
      "13: cat__Neighborhood_Gilbert (float64)\n",
      "14: cat__Neighborhood_IDOTRR (float64)\n",
      "15: cat__Neighborhood_MeadowV (float64)\n",
      "16: cat__Neighborhood_Mitchel (float64)\n",
      "17: cat__Neighborhood_NAmes (float64)\n",
      "18: cat__Neighborhood_NPkVill (float64)\n",
      "19: cat__Neighborhood_NWAmes (float64)\n",
      "20: cat__Neighborhood_NoRidge (float64)\n",
      "21: cat__Neighborhood_NridgHt (float64)\n",
      "22: cat__Neighborhood_OldTown (float64)\n",
      "23: cat__Neighborhood_SWISU (float64)\n",
      "24: cat__Neighborhood_Sawyer (float64)\n",
      "25: cat__Neighborhood_SawyerW (float64)\n",
      "26: cat__Neighborhood_Somerst (float64)\n",
      "27: cat__Neighborhood_StoneBr (float64)\n",
      "28: cat__Neighborhood_Timber (float64)\n",
      "29: cat__Neighborhood_Veenker (float64)\n",
      "30: cat__BldgType_1Fam (float64)\n",
      "31: cat__BldgType_2fmCon (float64)\n",
      "32: cat__BldgType_Duplex (float64)\n",
      "33: cat__BldgType_Twnhs (float64)\n",
      "34: cat__BldgType_TwnhsE (float64)\n",
      "35: cat__HouseStyle_1.5Fin (float64)\n",
      "36: cat__HouseStyle_1.5Unf (float64)\n",
      "37: cat__HouseStyle_1Story (float64)\n",
      "38: cat__HouseStyle_2.5Fin (float64)\n",
      "39: cat__HouseStyle_2.5Unf (float64)\n",
      "40: cat__HouseStyle_2Story (float64)\n",
      "41: cat__HouseStyle_SFoyer (float64)\n",
      "42: cat__HouseStyle_SLvl (float64)\n",
      "43: cat__ExterQual_Ex (float64)\n",
      "44: cat__ExterQual_Fa (float64)\n",
      "45: cat__ExterQual_Gd (float64)\n",
      "46: cat__ExterQual_TA (float64)\n",
      "47: cat__KitchenQual_Ex (float64)\n",
      "48: cat__KitchenQual_Fa (float64)\n",
      "49: cat__KitchenQual_Gd (float64)\n",
      "50: cat__KitchenQual_TA (float64)\n",
      "51: cat__FireplaceQu_Ex (float64)\n",
      "52: cat__FireplaceQu_Fa (float64)\n",
      "53: cat__FireplaceQu_Gd (float64)\n",
      "54: cat__FireplaceQu_Po (float64)\n",
      "55: cat__FireplaceQu_TA (float64)\n",
      "56: cat__FireplaceQu_nan (float64)\n",
      "Total number of features after PCA: 57\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 400x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Comparison of MAE:\n",
      "Basic Pipeline MAE (without scaling): 18845.318978310504\n",
      "Pipeline with Scaler and PCA MAE: 19482.492221950426\n"
     ]
    }
   ],
   "source": [
    "# --- Pipeline with Scaler and PCA ---\n",
    "# 1. Create transformers (numerical and categorical)\n",
    "numerical_transformer_pca = Pipeline(steps=[\n",
    "                                    ('imputer', SimpleImputer(strategy='median')),\n",
    "                                    # Impute missing numerical values with the median\n",
    "                                    ('scaler', StandardScaler()),\n",
    "                                    # Scale numerical features using StandardScaler\n",
    "                                    ('pca', PCA(n_components=0.95))\n",
    "                                    # Apply PCA to reduce dimensionality, keeping 95% of variance\n",
    "])\n",
    "\n",
    "categorical_transformer_pca = OneHotEncoder(handle_unknown='ignore', sparse_output=False)\n",
    "# One-hot encode categorical features, handle unknown values, and use a dense output\n",
    "\n",
    "# 2. Create preprocessor using ColumnTransformer\n",
    "preprocessor_pca = ColumnTransformer(\n",
    "                       transformers=[\n",
    "                                    ('num', numerical_transformer_pca, numerical_cols),\n",
    "                                    # Apply numerical transformer to numerical columns\n",
    "                                    ('cat', categorical_transformer_pca, categorical_cols)\n",
    "                                    # Apply categorical transformer to categorical columns\n",
    "    ])\n",
    "\n",
    "# 3. Create the main pipeline\n",
    "pipeline_pca = Pipeline(steps=[\n",
    "                              ('preprocessor', preprocessor_pca),\n",
    "                              # Apply the preprocessor (numerical and categorical transformers)\n",
    "                              ('model', RandomForestRegressor(n_estimators=100, random_state=0))\n",
    "                              # Use RandomForestRegressor as the model\n",
    "])\n",
    "\n",
    "# 4. Fit the pipeline to the training data\n",
    "pipeline_pca.fit(X_train, y_train) # Train the pipeline on the training data\n",
    "\n",
    "# --- Print Feature Information ---\n",
    "print(\"\\nFeatures Before Transformation:\")\n",
    "for i, feature in enumerate(X_train.columns):\n",
    "    feature_type = X_train[feature].dtype\n",
    "    print(f\"{i}: {feature} ({feature_type})\")\n",
    "print(f\"Total number of features before encoding: {len(X_train.columns)}\")\n",
    "\n",
    "print(\"\\nFeatures After Encoding (Before PCA):\")\n",
    "# Get transformed data after encoding but before PCA\n",
    "transformed_data_encoded = pipeline_pca.named_steps['preprocessor'].transform(X_train)\n",
    "\n",
    "# Get feature names after encoding but before PCA\n",
    "encoded_features = pipeline_pca.named_steps['preprocessor'].get_feature_names_out()\n",
    "\n",
    "# Print encoded feature names and their types:\n",
    "for i, feature in enumerate(encoded_features):\n",
    "    # Get the column index corresponding to the current feature\n",
    "    col_index = list(encoded_features).index(feature)\n",
    "\n",
    "    # Infer the data type from the transformed data\n",
    "    feature_type = transformed_data_encoded[0][col_index].dtype\n",
    "\n",
    "    print(f\"{i}: {feature} ({feature_type})\")\n",
    "\n",
    "\n",
    "# Get transformed data after PCA\n",
    "transformed_data_pca = pipeline_pca.named_steps['preprocessor'].transform(X_train)\n",
    "\n",
    "# Get feature names after PCA\n",
    "transformed_features_pca = pipeline_pca.named_steps['preprocessor'].get_feature_names_out()\n",
    "\n",
    "# Print transformed feature names and their types:\n",
    "for i, feature in enumerate(transformed_features_pca):\n",
    "    # Get the column index corresponding to the current feature\n",
    "    col_index = list(transformed_features_pca).index(feature)\n",
    "\n",
    "    # Infer the data type from the transformed data\n",
    "    feature_type = transformed_data_pca[0][col_index].dtype\n",
    "\n",
    "    print(f\"{i}: {feature} ({feature_type})\")\n",
    "\n",
    "print(f\"Total number of features after PCA: {len(transformed_features_pca)}\")\n",
    "\n",
    "# 5. Make predictions and evaluate\n",
    "predictions_pca = pipeline_pca.predict(X_val)\n",
    "mae_pca = mean_absolute_error(y_val, predictions_pca)\n",
    "\n",
    "# --- Visualization: Explained Variance Ratio ---\n",
    "pca = pipeline_pca.named_steps['preprocessor'].named_transformers_['num'].named_steps['pca']\n",
    "explained_variance_ratio = pca.explained_variance_ratio_\n",
    "\n",
    "plt.figure(figsize=(4, 3))\n",
    "plt.bar(range(1, len(explained_variance_ratio) + 1), explained_variance_ratio, color='coral')\n",
    "plt.xlabel('Principal Component')\n",
    "plt.ylabel('Explained Variance Ratio')\n",
    "plt.title('Explained Variance Ratio of Principal Components')\n",
    "plt.show()\n",
    "\n",
    "# --- Compare MAE with and without PCA ---\n",
    "print(\"\\nComparison of MAE:\")\n",
    "print(\"Basic Pipeline MAE (without scaling):\", mae_basic)\n",
    "print(\"Pipeline with Scaler and PCA MAE:\",              mae_pca)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9e4f60e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-08T16:31:42.370937Z",
     "iopub.status.busy": "2025-05-08T16:31:42.370236Z",
     "iopub.status.idle": "2025-05-08T16:31:57.416807Z",
     "shell.execute_reply": "2025-05-08T16:31:57.415863Z"
    },
    "papermill": {
     "duration": 15.052775,
     "end_time": "2025-05-08T16:31:57.418392",
     "exception": false,
     "start_time": "2025-05-08T16:31:42.365617",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GridSearchCV Completed!\n",
      "\n",
      "Best Parameters from GridSearchCV hyperparameter combination found:\n",
      "{'model__n_estimators': 200, 'preprocessor__num__imputer__strategy': 'mean'}\n",
      "\n",
      "Best Score from GridSearchCV (Negative MAE) achieved with cross-validation:\n",
      "-19142.2309847944\n",
      "\n",
      "---------------------------------------------------------------------------------\n",
      "\n",
      "---------------------------------------------------------------------------------\n",
      "\n",
      "Comparison of MAE:\n",
      "Basic Pipeline MAE (without scaling): 18845.318978310504\n",
      "\n",
      "---------------------------------------------------------------------------------\n",
      "\n",
      "MAE of Best Pipeline on Validation Set: 18907.73658390411\n",
      "\n",
      "Hyperparameter Tuning with Pipeline and GridSearchCV Completed Successfully!\n",
      "\n",
      "------------------------------------------------------------------------------------\n",
      "Hyperparameter combination: {'model__n_estimators': 50, 'preprocessor__num__imputer__strategy': 'mean'}\n",
      "  Fold 1 MAE: 17848.41178537512\n",
      "  Fold 2 MAE: 22973.244045584044\n",
      "  Fold 3 MAE: 18833.208404558405\n",
      "  Fold 4 MAE: 20180.928563253627\n",
      "  Fold 5 MAE: 17048.084735336193\n",
      "--------------------\n",
      "Hyperparameter combination: {'model__n_estimators': 50, 'preprocessor__num__imputer__strategy': 'median'}\n",
      "  Fold 1 MAE: 17848.41178537512\n",
      "  Fold 2 MAE: 22973.244045584044\n",
      "  Fold 3 MAE: 18833.208404558405\n",
      "  Fold 4 MAE: 20180.928563253627\n",
      "  Fold 5 MAE: 17048.084735336193\n",
      "--------------------\n",
      "Hyperparameter combination: {'model__n_estimators': 100, 'preprocessor__num__imputer__strategy': 'mean'}\n",
      "  Fold 1 MAE: 17829.648542599378\n",
      "  Fold 2 MAE: 22660.230388685384\n",
      "  Fold 3 MAE: 18761.993150183152\n",
      "  Fold 4 MAE: 20051.706229307172\n",
      "  Fold 5 MAE: 16891.834799713877\n",
      "--------------------\n",
      "Hyperparameter combination: {'model__n_estimators': 100, 'preprocessor__num__imputer__strategy': 'median'}\n",
      "  Fold 1 MAE: 17829.648542599378\n",
      "  Fold 2 MAE: 22660.230388685384\n",
      "  Fold 3 MAE: 18761.993150183152\n",
      "  Fold 4 MAE: 20051.706229307172\n",
      "  Fold 5 MAE: 16891.834799713877\n",
      "--------------------\n",
      "Hyperparameter combination: {'model__n_estimators': 200, 'preprocessor__num__imputer__strategy': 'mean'}\n",
      "  Fold 1 MAE: 17810.933971645638\n",
      "  Fold 2 MAE: 22535.704465303217\n",
      "  Fold 3 MAE: 18344.591261701262\n",
      "  Fold 4 MAE: 20119.517995605966\n",
      "  Fold 5 MAE: 16900.407229715922\n",
      "--------------------\n",
      "Hyperparameter combination: {'model__n_estimators': 200, 'preprocessor__num__imputer__strategy': 'median'}\n",
      "  Fold 1 MAE: 17810.933971645638\n",
      "  Fold 2 MAE: 22535.704465303217\n",
      "  Fold 3 MAE: 18344.591261701262\n",
      "  Fold 4 MAE: 20119.517995605966\n",
      "  Fold 5 MAE: 16900.407229715922\n",
      "--------------------\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAi4AAAGJCAYAAACtu7gUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABGgElEQVR4nO3deVwV5f4H8M85CId90yNLsgkprqRYRrmAEouE0mZqCai472Z2vaWRlmu45Jp6g35pboWae6SooWhyBXMXFVOvgEvIEVSOwPP7w8tcjiyCgofRz/v1Oi+dmWee+c54Rj7MPHOOQgghQERERCQDSn0XQERERFRVDC5EREQkGwwuREREJBsMLkRERCQbDC5EREQkGwwuREREJBsMLkRERCQbDC5EREQkGwwuREREJBsMLkR12A8//ABPT08YGhrC2tpa3+XUaXv27IFCocCePXv0XQoR1SIGF9KLuLg4KBQKpKSk6LuUJ7Zt2zZER0fXeL+nT59GZGQk3N3dsXz5cixbtqzCttHR0VAoFLhx40aN11GTDhw4gOjoaNy6deux+1i8eDHi4uJqrKaaUFxcjP/7v/9D+/btYWtrCwsLCzRp0gTh4eE4ePCg1O7kyZOIjo7GxYsXa6WOunhs9KnkvFAqlbh8+XKZ5RqNBiYmJlAoFBgxYkS5fZw6dQoKhQLGxsYVvm99fX2hUCjKfXl6etbkLhGAevougEjutm3bhkWLFtV4eNmzZw+Ki4sxf/58eHh41Gjf+nLgwAF88cUXiIyMfOwrSIsXL0aDBg0QGRmpM79Tp064e/cujIyMnrzQaho1ahQWLVqEHj164IMPPkC9evVw5swZbN++HY0bN8arr74K4EFw+eKLL+Dr6wtXV9car6OiY/O8U6lUWL16NSZMmKAzPz4+/pHrrly5Evb29sjJycFPP/2EqKiocts1atQI06dPLzPfysrq8YqmCjG4ENVR165dAwDeIqoipVIJY2Pjp77d7OxsLF68GAMHDixzVWzevHm4fv36Y/UrhMC9e/dgYmJSE2U+17p161ZucPnxxx8REhKCn3/+udz1hBD48ccf0adPH2RkZGDVqlUVBhcrKyt8+OGHNV47lcVbRVRnREZGwtzcHJcuXcKbb74Jc3NzvPDCC1i0aBEA4NixY+jSpQvMzMzg4uKCH3/8UWf9kttP+/btw+DBg1G/fn1YWloiPDwcOTk5Om03bdqEkJAQODo6QqVSwd3dHVOnTkVRUVGZug4dOoRu3brBxsYGZmZmaN26NebPny/VXFJf6cvDj7J48WK0aNECKpUKjo6OGD58uM5laFdXV3z++ecAALVaDYVCUe0rOr6+vmjZsiX+/PNPdO7cGaampvDw8MBPP/0EANi7dy/at28PExMTNG3aFL/99pvO+iWX2U+fPo2ePXvC0tIS9evXx+jRo3Hv3j2p3cWLF6FQKMq9RVG67ujoaHz88ccAADc3N+lYldw2iY2NRZcuXdCwYUOoVCo0b94cS5Ys0enP1dUVJ06cwN69e6X1fX19AVQ8xmX9+vXw9vaGiYkJGjRogA8//BD/+c9/dNqUvPf+85//ICwsDObm5lCr1Rg/fny574nSMjIyIITA66+/Xu7+N2zYEMCD9+d7770HAPDz85PqL6nX1dUVb775Jnbu3Il27drBxMQE3377bY0cGwC4desWxowZAycnJ6hUKnh4eGDmzJkoLi7W6efmzZvo27cvLC0tYW1tjYiICBw9elTn3zg2NhYKhQKpqall9nnatGkwMDAoc4wflpqaiuDgYFhaWsLc3Bxdu3bVua1WcswUCgX279+PcePGQa1Ww8zMDG+99Va1AmGfPn2QlpaG06dPS/OysrKwe/du9OnTp8L19u/fj4sXL6JXr17o1asX9u3bhytXrlR5u1Q7GFyoTikqKkJwcDCcnJwwa9YsuLq6YsSIEYiLi0NQUBDatWuHmTNnwsLCAuHh4cjIyCjTx4gRI3Dq1ClER0cjPDwcq1atQlhYGIQQUpu4uDiYm5tj3LhxmD9/Pry9vTF58mT84x//0OkrISEBnTp1wsmTJzF69GjExMTAz88PW7ZsAQAMHjwYb7zxBoAHA2lLXpWJjo7G8OHD4ejoiJiYGLzzzjv49ttvERAQgPv37wN48Jv6W2+9BQBYsmQJfvjhB7z99tvVPp45OTl488030b59e8yaNQsqlQq9evXC2rVr0atXL3Tr1g0zZsxAfn4+3n33Xdy+fbtMHz179sS9e/cwffp0dOvWDd988w0GDRpU7Vrefvtt9O7dGwAwd+5c6Vip1WppP11cXPDPf/4TMTExcHJywrBhw6RgWHJcGjVqBE9PT2n9Tz/9tMJtxsXFoWfPnjAwMMD06dMxcOBAxMfHo0OHDmXGKxQVFSEwMBD169fH119/jc6dOyMmJqbSsUUA4OLiAuBBQLpz506F7Tp16oRRo0YBAP75z39K9Tdr1kxqc+bMGfTu3RtvvPEG5s+fj5deeqlGjs2dO3fQuXNnrFy5EuHh4fjmm2/w+uuvY+LEiRg3bpzUR3FxMUJDQ7F69WpERETgq6++QmZmJiIiInT25d1334WJiQlWrVpVZj9XrVoFX19fvPDCCxUeixMnTqBjx444evQoJkyYgEmTJiEjIwO+vr44dOhQmfYjR47E0aNH8fnnn2Po0KHYvHlzhWNSytOpUyc0atRI55edtWvXwtzcHCEhIRWut2rVKri7u+Pll19GaGgoTE1NsXr16nLbFhUV4caNG2Ve+fn5Va6TqkgQ6UFsbKwAIA4fPizNi4iIEADEtGnTpHk5OTnCxMREKBQKsWbNGmn+6dOnBQDx+eefl+nT29tbaLVaaf6sWbMEALFp0yZp3p07d8rUNHjwYGFqairu3bsnhBCisLBQuLm5CRcXF5GTk6PTtri4WPr78OHDRVVPpWvXrgkjIyMREBAgioqKpPkLFy4UAMR3330nzfv8888FAHH9+vVH9lte286dOwsA4scff5TmlRw3pVIpDh48KM3fuXOnACBiY2PL9Nm9e3edbQ0bNkwAEEePHhVCCJGRkVFm3RIP/xvNnj1bABAZGRll2pb3bxIYGCgaN26sM69Fixaic+fOZdomJiYKACIxMVEIIYRWqxUNGzYULVu2FHfv3pXabdmyRQAQkydPluaVvPemTJmi02ebNm2Et7d3mW09LDw8XAAQNjY24q233hJff/21OHXqVJl269ev16mxNBcXFwFA7Nixo8yyJz02U6dOFWZmZuLs2bM68//xj38IAwMDcenSJSGEED///LMAIObNmye1KSoqEl26dCnzb9y7d2/h6Oio8z4+cuRIhe+F0sLCwoSRkZE4f/68NO/q1avCwsJCdOrUSZpXck77+/vrnHNjx44VBgYG4tatW5Vup/R5MX78eOHh4SEte/nll0W/fv2EEA/ep8OHD9dZV6vVivr164tPP/1UmtenTx/h5eVVZjsl51p5r8GDB1daI1Ufr7hQnVP6HrK1tTWaNm0KMzMz9OzZU5rftGlTWFtb48KFC2XWHzRoEAwNDaXpoUOHol69eti2bZs0r/S4gdu3b+PGjRvo2LEj7ty5I11OTk1NRUZGBsaMGVNmnElVbgeV57fffoNWq8WYMWOgVP7v9Bs4cCAsLS2xdevWx+q3Iubm5ujVq5c0XXLcmjVrhvbt20vzS/5e3vEcPny4zvTIkSMBQOd41oTS/ya5ubm4ceMGOnfujAsXLiA3N7fa/aWkpODatWsYNmyYztiXkJAQeHp6lnushwwZojPdsWPHco/Jw2JjY7Fw4UK4ublhw4YNGD9+PJo1a4auXbs+8pZJaW5ubggMDCwz/0mPzfr169GxY0fY2NjoXA3w9/dHUVER9u3bBwDYsWMHDA0NMXDgQGldpVJZ5j0AAOHh4bh69SoSExOleatWrYKJiQneeeedCmspKirCr7/+irCwMDRu3Fia7+DggD59+iApKQkajUZnnUGDBumccx07dkRRURH++uuvR+57iT59+uDcuXM4fPiw9Gdlt4m2b9+OmzdvSlcJAaB37944evQoTpw4Uaa9q6srEhISyrzGjBlT5Rqpajg4l+oUY2Nj6dZBCSsrKzRq1KhMWLCysiozdgUAXnzxRZ1pc3NzODg46DyCeuLECXz22WfYvXt3mf8kS34QnD9/HgDQsmXLx96fh5X8R9u0aVOd+UZGRmjcuHG1/iOuioqOm5OTU5l5AKp0PN3d3aFUKmv8kd79+/fj888/R3JycplbLrm5udV+OqOiYw0Anp6eSEpK0plX3nvPxsam3GPysJIf7sOHD8fNmzexf/9+LF26FNu3b0evXr3w+++/V6lmNze3cuc/6bFJT0/Hn3/+WWb/SpQMBP/rr7/g4OAAU1NTneXlPdX2xhtvwMHBAatWrULXrl1RXFyM1atXo0ePHrCwsKiwluvXr+POnTvl/rs0a9YMxcXFuHz5Mlq0aCHNd3Z21mlnY2MDoPz3a0XatGkDT09P/Pjjj7C2toa9vT26dOlSYfuVK1fCzc0NKpUK586dA/DgvW9qaopVq1Zh2rRpOu3NzMzg7+9f5Xro8TG4UJ1iYGBQrfmi1LiVqrp16xY6d+4MS0tLTJkyBe7u7jA2NsaRI0fwySeflBmsKGe1cTwfDkIVXX161KDW0s6fP4+uXbvC09MTc+bMgZOTE4yMjLBt2zbMnTv3qfybVHRMqqt+/fro3r07unfvDl9fX+zduxd//fWXNBamMuU9QVQTx6a4uBhvvPFGmadqSjRp0uTRO/YQAwMD9OnTB8uXL8fixYuxf/9+XL16tVaerKmp879Pnz5YsmQJLCws8P777+tc9SxNo9Fg8+bNuHfvXpngDjx4Gumrr7567Cuv9GQYXOiZk56eDj8/P2k6Ly8PmZmZ6NatG4AHT5/cvHkT8fHx6NSpk9Tu4YG+7u7uAIDjx49X+ptUdf7zKvnhdebMGZ3L5FqtFhkZGXXyN7b09HSdKwHnzp1DcXGx9DkkJb/9PjzYtbyrRxUdq82bN6OgoAC//PKLzm/XpW9DPKqPh5U+1g//Zn3mzJkqBYkn1a5dO+zduxeZmZlwcXF5rB90NXFs3N3dkZeX98j3l4uLCxITE3Hnzh2dqy4lVxweFh4ejpiYGGzevBnbt2+HWq0u91ZXaWq1Gqampjhz5kyZZadPn4ZSqSxzRbCm9OnTB5MnT0ZmZmalg+jj4+Nx7949LFmyBA0aNNBZdubMGXz22WfYv38/OnToUCt1UuU4xoWeOcuWLZOezgEePJFRWFiI4OBgAP/77a30b2tarRaLFy/W6adt27Zwc3PDvHnzyvxQLr2umZkZgLI/uMvj7+8PIyMjfPPNNzp9/Otf/0Jubm6lTzjoS+knVwBgwYIFACAdT0tLSzRo0EAaJ1Hi4eMJVHysyvs3yc3NRWxsbLl9VOVYt2vXDg0bNsTSpUtRUFAgzd++fTtOnTpVY8c6KysLJ0+eLDNfq9Vi165dUCqV0q2W6rxXStTEsenZsyeSk5Oxc+fOMstu3bqFwsJCAEBgYCDu37+P5cuXS8uLi4vLvAdKtG7dGq1bt8aKFSvw888/o1evXqhXr/Lfhw0MDBAQEIBNmzbp3G7Mzs7Gjz/+iA4dOsDS0rLSPh6Xu7s75s2bh+nTp+OVV16psN3KlSvRuHFjDBkyBO+++67Oa/z48TA3Ny/3iSp6OnjFhZ45Wq0WXbt2Rc+ePXHmzBksXrwYHTp0QPfu3QEAr732GmxsbBAREYFRo0ZBoVDghx9+KHPZWalUYsmSJQgNDcVLL72Efv36wcHBAadPn8aJEyekHwLe3t4AHnx6amBgIAwMDHQGxJamVqsxceJEfPHFFwgKCkL37t2lGl9++eU6+QFWGRkZ6N69O4KCgpCcnIyVK1eiT58+8PLyktpERUVhxowZiIqKQrt27bBv3z6cPXu2TF8lx+rTTz9Fr169YGhoiNDQUAQEBMDIyAihoaEYPHgw8vLysHz5cjRs2BCZmZll+liyZAm+/PJLeHh4oGHDhuWOVTA0NMTMmTPRr18/dO7cGb1790Z2djbmz58PV1dXjB07tkaOz5UrV/DKK6+gS5cu6Nq1K+zt7XHt2jWsXr0aR48exZgxY6Tf2l966SUYGBhg5syZyM3NhUqlkj6fpSI1cWw+/vhj/PLLL3jzzTcRGRkJb29v5Ofn49ixY/jpp59w8eJFNGjQAGFhYXjllVfw0Ucf4dy5c/D09MQvv/yCv//+G0D5V3TCw8Mxfvx4AKjy+/fLL79EQkICOnTogGHDhqFevXr49ttvUVBQgFmzZlWpj8c1evToSpeXDDgueXT9YSqVCoGBgVi/fj2++eYb6UGA3NxcrFy5stx16uJ5LWt6e56JnmsVPQ5tZmZWpm3nzp1FixYtysx3cXERISEhZfrcu3evGDRokLCxsRHm5ubigw8+EDdv3tRZd//+/eLVV18VJiYmwtHRUUyYMEF6JPjhR1WTkpLEG2+8ISwsLISZmZlo3bq1WLBggbS8sLBQjBw5UqjVaqFQKKr0aPTChQuFp6enMDQ0FHZ2dmLo0KFlHrmuicehq3LcSuChR0JL+jx58qR49913hYWFhbCxsREjRozQebxYiAeP6w4YMEBYWVkJCwsL0bNnT3Ht2rUyj0ML8eDR3BdeeEEolUqdR6N/+eUX0bp1a2FsbCxcXV3FzJkzxXfffVfm8emsrCwREhIiLCwsBADp8d+HH4cusXbtWtGmTRuhUqmEra2t+OCDD8SVK1d02lT03is5BpXRaDRi/vz5IjAwUDRq1EgYGhoKCwsL4ePjI5YvX67zGK8QQixfvlw0btxYGBgY6NRb0b9LTRwbIYS4ffu2mDhxovDw8BBGRkaiQYMG4rXXXhNff/21zscHXL9+XfTp00dYWFgIKysrERkZKfbv3y8A6HwkQYnMzExhYGAgmjRpUulxetiRI0dEYGCgMDc3F6ampsLPz08cOHBAp015/08IUfG/9cOqeg6Vfu/HxMQIAGLXrl0Vto+Li9P5iIXKHofmj9mapxDiMUY3EtVBcXFx6NevHw4fPox27drpuxzZi46OxhdffIHr16+Xuc9Pz5eNGzfirbfeQlJSUplPCL5x4wYcHBwwefJkTJo0SU8V0vOEY1yIiEhy9+5dnemioiIsWLAAlpaWaNu2bZn2cXFxKCoqQt++fZ9WifSc4xgXIiKSjBw5Enfv3oWPjw8KCgoQHx+PAwcOYNq0aTqPa+/evRsnT57EV199hbCwsFr5tmui8jC4EBGRpEuXLoiJicGWLVtw7949eHh4YMGCBWW+G2jKlCk4cOAAXn/9delJM6KngWNciIiISDY4xoWIiIhkg8GFiIiIZINjXGpIcXExrl69CgsLC35/BRERUTUIIXD79m04OjpW+B1SJRhcasjVq1dr7fs1iIiIngeXL19Go0aNKm3D4FJDSr7G/fLly7X2PRtERETPIo1GAycnJ+lnaWUYXGpIye0hS0tLBhciIqLHUJWhFhycS0RERLLB4EJERESyweBCREREssHgQkRERLLB4EJERESyweBCREREssHgQkRERLLB4EJERESyweBCREREssFPzqVaI4SAVqvVdxmPpXTtRkZGsvziTLnWTU+PXM/RZ+H8BORduz4xuFCt0Wq1GDFihL7LeG4tXLgQKpVK32VQHcZzVL94jj4e3ioiIiIi2VAIIYS+i3gWaDQaWFlZITc3l1+y+F9yvQwNAAUFBfjoo48AADExMbL8rYiXoelR5HqOPgvnJ8BztLTq/AzlrSKqNQqFQrb/oZSmUqmeif0getizcI7y/Hz+8FYRERERyQaDCxEREckGgwsRERHJBoMLERERyQaDCxEREckGgwsRERHJBoMLERERyQaDCxEREckGgwsRERHJBoMLERERyQaDCxEREckGgwsRERHJBoMLERERyQaDCxEREckGgwsRERHJBoMLERERyQaDCxEREckGgwsRERHJBoMLERERyQaDCxEREckGgwsRERHJBoMLERERyQaDCxEREckGgwsRERHJBoMLERERyYZeg8u+ffsQGhoKR0dHKBQKbNy4UWd5dnY2IiMj4ejoCFNTUwQFBSE9PV2nzeDBg+Hu7g4TExOo1Wr06NEDp0+f1mmjUCjKvNasWaPTZs+ePWjbti1UKhU8PDwQFxdXG7tMRERET0CvwSU/Px9eXl5YtGhRmWVCCISFheHChQvYtGkTUlNT4eLiAn9/f+Tn50vtvL29ERsbi1OnTmHnzp0QQiAgIABFRUU6/cXGxiIzM1N6hYWFScsyMjIQEhICPz8/pKWlYcyYMYiKisLOnTtrbd+JiIio+urpc+PBwcEIDg4ud1l6ejoOHjyI48ePo0WLFgCAJUuWwN7e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kxMAIDk5Ga1atYKdnZ3ULjAwEBqNBidOnJDa+Pv76/QVGBiI5OTkSuvTaDQ6LyIiIqpddTa4eHp6wtnZGRMnTkROTg60Wi1mzpyJK1euIDMzU6ft4sWLYW5uDnNzc2zfvh0JCQkwMnrwyHBWVpZOaAEgTWdlZVXaRqPR4O7du+XWN336dFhZWUmvkqBEREREtafOBhdDQ0PEx8fj7NmzsLW1hampKRITExEcHAylUrfsDz74AKmpqdi7dy+aNGmCnj174t69e7Va38SJE5Gbmyu9Ll++XKvbIyIiojr+AXTe3t5IS0tDbm4utFot1Go12rdvj3bt2um0K7nq8eKLL+LVV1+FjY0NNmzYgN69e8Pe3h5//PGHTvvs7GwAgL29vfRnybzSbSwtLWFiYlJubSqVSjbfpUJERPSsqLNXXEqzsrKCWq1Geno6UlJS0KNHjwrbCiEghJDGyPj4+ODYsWO4du2a1CYhIQGWlpZo3ry51GbXrl06/SQkJMDHx6cW9oaIiIgel16vuOTl5eHcuXPSdEZGBtLS0mBrawtnZ2esX78earUazs7OOHbsGEaPHo2wsDAEBAQAAC5cuIC1a9ciICAAarUaV65cwYwZM2BiYoJu3boBAAICAtC8eXP07dsXs2bNQlZWFj777DMMHz5cumIyZMgQLFy4EBMmTED//v2xe/durFu3Dlu3bn36B4WIiIgqpNfgkpKSAj8/P2l63LhxAICIiAjExcUhMzMT48aNQ3Z2NhwcHBAeHo5JkyZJ7Y2NjfH7779j3rx5yMnJgZ2dHTp16oQDBw6gYcOGAAADAwNs2bIFQ4cOhY+PD8zMzBAREYEpU6ZI/bi5uWHr1q0YO3Ys5s+fj0aNGmHFihV8FJqIiKiO0Wtw8fX1hRAVf3HTqFGjMGrUqAqXOzo6Ytu2bY/cjouLyyPb+fr6IjU19ZF9ERERkf7IYowLEREREcDgQkRERDLC4EJERESyweBCREREssHgQkRERLLB4EJERESyweBCREREssHgQkRERLLB4EJERESyweBCREREssHgQkRERLLB4EJERESyweBCREREssHgQkRERLLB4EJERESyweBCREREssHgQkRERLLB4EJERESyweBCREREssHgQkRERLLB4EJERESyweBCREREssHgQkRERLLB4EJERESyweBCREREssHgQkRERLLB4EJERESyweBCREREssHgQkRERLLB4EJERESyUa3g8scff6CoqKjC5QUFBVi3bt0TF0VERERUnmoFFx8fH9y8eVOatrS0xIULF6TpW7duoXfv3jVXHREREVEp1QouQohKpyuaR0RERFQTanyMi0KhqOkuiYiIiABwcC4RERHJSL3qrnDy5ElkZWUBeHBb6PTp08jLywMA3Lhxo2arIyIiIiql2sGla9euOuNY3nzzTQAPbhEJIXiriIiIiGpNtYJLRkZGbdVBRERE9EjVCi4uLi6PbHP8+PHHLoaIiIioMjUyOPf27dtYtmwZXnnlFXh5edVEl0RERERlPFFw2bdvHyIiIuDg4ICvv/4aXbp0wcGDB2uqNiIiIiId1R6cm5WVhbi4OPzrX/+CRqNBz549UVBQgI0bN6J58+a1USMRERERgGpecQkNDUXTpk3x559/Yt68ebh69SoWLFhQW7URERER6ajWFZft27dj1KhRGDp0KF588cXaqomIiIioXNW64pKUlITbt2/D29sb7du3x8KFC/mhc0RERPTUVCu4vPrqq1i+fDkyMzMxePBgrFmzBo6OjiguLkZCQgJu375dW3USERERPd5TRWZmZujfvz+SkpJw7NgxfPTRR5gxYwYaNmyI7t2713SNRERERABq4HNcmjZtilmzZuHKlStYs2YNP/KfiIiIak21Buf279//kW3q16//2MUQERERVaZaV1zi4uKQmJiIW7duIScnp9zXrVu3qtzfvn37EBoaCkdHRygUCmzcuFFneXZ2NiIjI+Ho6AhTU1MEBQUhPT1dWv73339j5MiRaNq0KUxMTODs7IxRo0YhNzdXpx+FQlHmtWbNGp02e/bsQdu2baFSqeDh4YG4uLjqHBoiIiJ6Cqp1xWXo0KFYvXo1MjIy0K9fP3z44YewtbV97I3n5+fDy8sL/fv3x9tvv62zTAiBsLAwGBoaYtOmTbC0tMScOXPg7++PkydPwszMDFevXsXVq1fx9ddfo3nz5vjrr78wZMgQXL16FT/99JNOf7GxsQgKCpKmra2tpb9nZGQgJCQEQ4YMwapVq7Br1y5ERUXBwcEBgYGBj71/REREVLOqFVwWLVqEOXPmID4+Ht999x0mTpyIkJAQDBgwAAEBAdUe3xIcHIzg4OByl6Wnp+PgwYM4fvw4WrRoAQBYsmQJ7O3tsXr1akRF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\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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FRgYqLCwMC1ZskROp1NhYWHasWOHnnnmGcXFxSkqKkrSudASFRWlU6dO6Z///KfbIFmn06latWrp008/VVZWlu688055e3srKSlJ06ZN07hx41zbHTFihObMmaPx48dryJAhWrdunRYvXqyVK1dW2b4CAIAqUO33OF1CcnKykVRmGjhwoDHGmNmzZ5vQ0FDj6elpwsLCzMSJE01RUdFl15dk0tPTjTHGrF692rRv3974+fmZOnXqmHbt2pkFCxaYkpKSMrW0b9/eeHl5maZNm5r4+PhK7Qu3QwMAcGUq8x561V+yiHP4kkUAAK7MNf2SRQAAgGuF4AIAACyD4AIAACyD4AIAACyjUrdDA7A2Y4wKCwsv+lUW1am0tPR3/51eDoej3E/+rm4+Pj7y9vau0o+zAGoKwQX4HSksLFTXrl1rugzUgA0bNlz0k8ABK+FSEQAAsAzOuAC/I97e3tqwYQOXimpITV8qAn4LCC7A74jNZpOPj0+NXTKozi9lBfD7wKUiAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGQQXAABgGTUaXDZu3KiePXsqJCRENptNy5cvd1uelZWlQYMGKSQkRL6+vurRo4fS0tJcy0+cOKGnn35aLVu2lI+Pj8LCwjRmzBjl5OS49XPw4EHFxsbK19dXDRo00AsvvKCzZ8+6tVm/fr06dOggu92um266SQkJCdW12wAA4ArVaHApKChQu3btNHfu3DLLjDGKi4vT/v37tWLFCm3fvl3h4eGKjIxUQUGBJOnIkSM6cuSIZs2apZ07dyohIUGff/65nnzySVc/JSUlio2NVXFxsb7++mu9//77SkhI0Msvv+xqk56ertjYWHXr1k2pqakaO3ashg4dqjVr1lT/QQAAABVnrhOSzLJly1yP9+zZYySZnTt3uuaV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6mWaNGliTp8+7eqjR48e5rbbbjObN282mzZtMs2bNzf9+vWrqV3Cdeqpp54yAQEBZv369SYjI8M1nTp1ytXmcn/Lzp49a2655RYTFRVlUlNTzeeff26cTqeZMGFCTeySZRFcUO369u1rGjZsaLy8vMyNN95o+vbta/bt2+dafvr0aTNy5EhTr1494+vrax5++GGTkZFRgxXDKpKTk42kMtPAgQONMeduiX7ppZdMUFCQsdvt5oEHHjB79uxx6+P48eOmX79+xs/PzzgcDjN48GCTl5dXA3uD61l5rzNJJj4+3tWmIn/LDhw4YGJiYoyPj4+pX7++ef75582ZM2eu8d5Ym80YY2rmXA8AAEDlMMYFAABYBsEFAABYBsEFAABYBsEFAABYBsEFAABYBsEFAABYBsEFAABYBsEFAABYBsEFwG9G48aN9eabb9Z0GQCqEcEFgOUkJCSobt26ZeZv2bJFw4YNq/btE5CAmlO7pgsAgKridDpruoRKKS4ulpeXV02XAVgKZ1wAXLH77rtPY8aM0fjx4xUYGKjg4GBNnjy5QutmZ2dr6NChcjqdcjgcuv/++/Xdd9+5ln/33Xfq1q2b/P395XA41LFjR23dulXr16/X4MGDlZOTI5vNJpvN5trmr8+E2Gw2/f3vf9dDDz0kX19f3XzzzUpJSdG+fft03333qU6dOrrrrrv0008/udb56aef1KtXLwUFBcnPz0+33367vvzyS7d9/vnnn/Xss8+6tn/ev/71L7Vp00Z2u12NGzfW66+/7rbPjRs31tSpU/XEE0/I4XBo2LBhKi4u1ujRo9WwYUN5e3srPDxc06dPr8SzAPy+EFwAXJX3339fderU0ebNmzVz5kxNmTJFSUlJl13vj3/8o44eParVq1dr27Zt6tChgx544AGdOHFCkjRgwACFhoZqy5Yt2rZtm/7yl7/I09NTd911l9588005HA5lZGQoIyND48aNu+h2zgeF1NRUtWrVSv3799fw4cM1YcIEbd26VcYYjR492tU+Pz9fDz74oNauXavt27erR48e6tmzpw4ePChJWrp0qUJDQzVlyhTX9iVp27Zt6tOnjx577DHt2LFDkydP1ksvvaSEhAS3embNmqV27dpp+/bteumll/S3v/1Nn3zyiRYvXqw9e/YoMTFRjRs3ruSzAPyO1PC3UwOwsK5du5q7777bbd7tt99uXnzxxUuu93//93/G4XCYwsJCt/nNmjUzf//7340xxvj7+5uEhIRy14+PjzcBAQFl5oeHh5u//vWvrseSzMSJE12PU1JSjCTz7rvvuuYtXLjQeHt7X7LeNm3amLfeeuui2zHGmP79+5vu3bu7zXvhhRdM69at3daLi4tza/P000+b+++/35SWll6yBgDncMYFwFW59dZb3R43bNhQR48eveQ63333nfLz83XDDTfIz8/PNaWnp7su2zz33HMaOnSoIiMj9eqrr7pdzrnS+oKCgiRJbdu2dZtXWFio3NxcSefOuIwbN04333yz6tatKz8/P+3atct1xuVidu3apS5durjN69Kli9LS0lRSUuKa16lTJ7c2gwYNUmpqqlq2bKkxY8boiy++uKL9BH4vGJwL4Kp4enq6PbbZbCotLb3kOvn5+WrYsKHWr19fZtn5u4UmT56s/v37a+XKlVq9erUmTZqkRYsW6eGHH77i+s6PRylv3vmax40bp6SkJM2aNUs33XSTfHx89Oijj6q4uLhS272YOnXquD3u0KGD0tPTtXr1an355Zfq06ePIiMj9fHHH1fJ9oDfGoILgGuuQ4cOyszMVO3atS85nqNFixZq0aKFnn32WfXr10/x8fF6+OGH5eXl5XYWoyp99dVXGjRokCsg5efn68CBA25tytv+zTffrK+++qpMXy1atFCtWrUuuU2Hw6G+ffuqb9++evTRR9WjRw+dOHFCgYGBV79DwG8Ml4oAXHORkZGKiIhQXFycvvjiCx04cEBff/21/vu//1tbt27V6dOnNXr0aK1fv14///yzvvrqK23ZskU333yzpHN35+Tn52vt2rU6duyYTp06VWW1NW/eXEuXLlVqaqq+++479e/fv8wZpMaNG2vjxo365ZdfdOzYMUnS888/r7Vr12rq1Knau3ev3n//fc2ZM+eSA4cl6Y033tDChQu1e/du7d27V0uWLFFwcHC5n1MDgOACoAbYbDatWrVK9957rwYPHqwWLVroscce088//6ygoCDVqlVLx48f1xNPPKEWLVqoT58+iomJ0SuvvCJJuuuuuzRixAj17dtXTqdTM2fOrLLa3njjDdWrV0933XWXevbsqejoaHXo0MGtzZQpU3TgwAE1a9bM9dkxHTp00OLFi7Vo0SLdcsstevnllzVlyhQNGjToktvz9/fXzJkz1alTJ91+++06cOCAVq1aJQ8P/jwD5bEZY0xNFwEAAFARRHoAAGAZBBcAVS4xMdHtNucLpzZt2tR0eQAsjEtFAKpcXl6esrKyyl3m6emp8PDwa1wRgN8KggsAALAMLhUBAADLILgAAADLILgAAADLILgAAADLILgAAADLILgAAADLILgAAADL+P8Ax6YnidEgD6wAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# *** Pipeline for Hyperparameter Tuning ***\n",
    "\n",
    "# Create a pipeline for numerical features\n",
    "numerical_transformer_tune = Pipeline(steps=[\n",
    "                                     ('imputer', SimpleImputer(strategy='mean')),\n",
    "                                     # Step 1: Imputation using SimpleImputer (strategy will be tuned. Other strategies in SimpleImputer ('mean', 'median', 'most_frequent', 'constant'))\n",
    "                                     ('scaler', StandardScaler())\n",
    "                                     # Step 2: Scaling using StandardScaler\n",
    "])\n",
    "\n",
    "# Create a transformer for categorical features using OneHotEncoder\n",
    "categorical_transformer_tune = OneHotEncoder(handle_unknown='ignore', sparse_output=False)\n",
    "\n",
    "# Create a ColumnTransformer to apply different transformers to different columns\n",
    "preprocessor_tune = ColumnTransformer(\n",
    "                        transformers=[\n",
    "                                     ('num', numerical_transformer_tune, numerical_cols),\n",
    "                                     # Apply numerical transformer to numerical columns\n",
    "                                     ('cat', categorical_transformer_tune, categorical_cols)\n",
    "                                     # Apply categorical transformer to categorical columns\n",
    "])\n",
    "\n",
    "# Create the main pipeline, including the preprocessor and the model\n",
    "pipeline_tune = Pipeline(steps=[\n",
    "                        ('preprocessor', preprocessor_tune),\n",
    "                        # Step 1: Preprocessing using the ColumnTransformer\n",
    "                        ('model', RandomForestRegressor(random_state=0))\n",
    "                        # Step 2: Model using RandomForestRegressor (n_estimators will be tuned)\n",
    "])\n",
    "\n",
    "# --- Define Hyperparameter Grid for GridSearchCV ---\n",
    "# Define the hyperparameter grid to search\n",
    "param_grid = {\n",
    "             'preprocessor__num__imputer__strategy': ['mean', 'median'],\n",
    "              # Tune the 'strategy' parameter of the SimpleImputer within the numerical pipeline\n",
    "             'model__n_estimators': [50, 100, 200]\n",
    "              # Tune the 'n_estimators' parameter of the RandomForestRegressor\n",
    "}\n",
    "\n",
    "# --- Perform GridSearchCV with Pipeline ---\n",
    "# Create a GridSearchCV object to perform hyperparameter tuning\n",
    "grid_search = GridSearchCV(pipeline_tune,\n",
    "                           # The main pipeline, including the preprocessor and the model\n",
    "                           param_grid,\n",
    "                           # The hyperparameter grid to search\n",
    "                           cv=5,\n",
    "                           # Use 5-fold cross-validation\n",
    "                           scoring='neg_mean_absolute_error',\n",
    "                           # Use negative MAE as the scoring metric\n",
    "                           n_jobs=-1)\n",
    "                           # Use all available CPU cores for parallel processing\n",
    "\n",
    "# Fit the GridSearchCV object to the training data to find the best hyperparameters\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# --- Best Parameters and Best Score from GridSearchCV ---\n",
    "\n",
    "# Get the best pipeline (with the tuned hyperparameters)\n",
    "best_pipeline = grid_search.best_estimator_\n",
    "\n",
    "# Make predictions on the validation set using the best pipeline\n",
    "predictions_best = best_pipeline.predict(X_val)\n",
    "\n",
    "# Calculate the MAE on the validation set using the predictions from the best pipeline\n",
    "mae_best = mean_absolute_error(y_val, predictions_best)\n",
    "\n",
    "print(\"GridSearchCV Completed!\")\n",
    "\n",
    "# --- Best Parameters and Best Score from GridSearchCV ---\n",
    "print(\"\\nBest Parameters from GridSearchCV hyperparameter combination found:\")\n",
    "print(grid_search.best_params_) # Best hyperparameter combination found\n",
    "print(\"\\nBest Score from GridSearchCV (Negative MAE) achieved with cross-validation:\")\n",
    "print(grid_search.best_score_) # Best score (negative MAE) achieved with cross-validation\n",
    "print(\"\\n---------------------------------------------------------------------------------\")\n",
    "\n",
    "\n",
    "print(\"\\n---------------------------------------------------------------------------------\")\n",
    "print(\"\\nComparison of MAE:\")\n",
    "print(\"Basic Pipeline MAE (without scaling):\", mae_basic)\n",
    "print(\"\\n---------------------------------------------------------------------------------\")\n",
    "print(\"\\nMAE of Best Pipeline on Validation Set:\", mae_best) # MAE on validation set using the tuned pipeline\n",
    "print(\"\\nHyperparameter Tuning with Pipeline and GridSearchCV Completed Successfully!\")\n",
    "print(\"\\n------------------------------------------------------------------------------------\")\n",
    "\n",
    "\n",
    "# Print all MAEs\n",
    "results = grid_search.cv_results_\n",
    "for i in range(len(results['params'])):\n",
    "    print(f\"Hyperparameter combination: {results['params'][i]}\")\n",
    "    for j in range(grid_search.cv):\n",
    "        mae_score = -results[f'split{j}_test_score'][i]\n",
    "        print(f\"  Fold {j+1} MAE: {mae_score}\")\n",
    "    print(\"-\" * 20)\n",
    "\n",
    "# --------------  Visualizations  ----------------\n",
    "\n",
    "# Get the results from GridSearchCV\n",
    "results = grid_search.cv_results_\n",
    "\n",
    "# Extract the hyperparameter values and scores\n",
    "strategy_values = results['param_preprocessor__num__imputer__strategy']\n",
    "n_estimators_values = results['param_model__n_estimators']\n",
    "scores = -results['mean_test_score']  # Convert negative MAE back to positive MAE\n",
    "\n",
    "# Create DataFrame for heatmap with all folds\n",
    "heatmap_data_all_folds = pd.DataFrame({\n",
    "    'Imputation Strategy': strategy_values,  # Using strategy_values here\n",
    "    'n_estimators': n_estimators_values,  # Using n_estimators_values here\n",
    "    'MAE': scores  # Add the 'MAE' column here\n",
    "})\n",
    "\n",
    "# Pivot the data for the heatmap\n",
    "heatmap_data = heatmap_data_all_folds.pivot(index='Imputation Strategy', columns='n_estimators', values='MAE')  # Now pivoting heatmap_data_all_folds\n",
    "\n",
    "# Example: Create a heatmap for a specific fold\n",
    "plt.figure(figsize=(8, 4))\n",
    "sns.heatmap(heatmap_data, annot=True, cmap='viridis', fmt=\".1f\", cbar_kws={'label': 'MAE'})\n",
    "plt.title('Hyperparameter Tuning Results (Mean MAE)')\n",
    "plt.xlabel('n_estimators')\n",
    "plt.ylabel('Imputation Strategy')\n",
    "plt.show()\n",
    "\n",
    "# Visualizing the Impact of Imputation Strategy: We can create box plots to compare the distribution of MAE scores for different imputation strategies, which will give us a visual representation of the impact of this hyperparameter on the model's performance.\n",
    "\n",
    "melted_heatmap_data = pd.melt(heatmap_data.reset_index(), id_vars=['Imputation Strategy'], var_name='n_estimators', value_name='MAE')\n",
    "\n",
    "plt.figure(figsize=(6, 4))\n",
    "# Now use the melted data with 'Imputation Strategy' and 'MAE' columns\n",
    "sns.boxplot(x='Imputation Strategy', y='MAE', data=melted_heatmap_data, palette=['skyblue', 'coral'])\n",
    "plt.title('Impact of Imputation Strategy on MAE')\n",
    "plt.ylabel('MAE')\n",
    "plt.show()\n",
    "\n",
    "# Visualizing the Impact of n_estimators: Similarly, we can create box plots to compare the distribution of MAE scores for different values of n_estimators.\n",
    "\n",
    "plt.figure(figsize=(6, 4))\n",
    "# Use the melted data again, but this time with 'n_estimators' for x\n",
    "sns.boxplot(x='n_estimators', y='MAE', data=melted_heatmap_data, palette='viridis')\n",
    "plt.title('Impact of n_estimators on MAE')\n",
    "plt.ylabel('MAE')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0baf0a40",
   "metadata": {
    "papermill": {
     "duration": 0.005938,
     "end_time": "2025-05-08T16:31:57.429802",
     "exception": false,
     "start_time": "2025-05-08T16:31:57.423864",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## California Housing Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4a4d871a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-08T16:31:57.441320Z",
     "iopub.status.busy": "2025-05-08T16:31:57.441009Z",
     "iopub.status.idle": "2025-05-08T16:37:44.413510Z",
     "shell.execute_reply": "2025-05-08T16:37:44.412622Z"
    },
    "papermill": {
     "duration": 346.980274,
     "end_time": "2025-05-08T16:37:44.414940",
     "exception": false,
     "start_time": "2025-05-08T16:31:57.434666",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== California Housing Dataset ===\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Baseline MAE: 31654.86\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Scaled MAE: 31654.86\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PCA MAE: 43624.54\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best params: {'model__n_estimators': 200, 'preprocessor__cat__imputer__strategy': 'most_frequent', 'preprocessor__num__imputer__strategy': 'mean'}\n",
      "Tuned MAE: 31585.69\n",
      "Saved best_california_housing_pipeline.pkl\n",
      "Exploring categorical encoders:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  OneHotEncoder MAE: 31654.86\n",
      "  OrdinalEncoder MAE: 32039.82\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder, OrdinalEncoder\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.datasets import fetch_california_housing\n",
    "import pickle\n",
    "\n",
    "\"\"\" ** Utility to build a pipeline for any regression dataset with optional PCA ** \"\"\"\n",
    "def build_pipeline(use_pca=False):\n",
    "    # Numerical transformer: impute then scale, optional PCA\n",
    "    num_steps = [\n",
    "        ('imputer', SimpleImputer(strategy='median')),\n",
    "        ('scaler', StandardScaler())\n",
    "    ]\n",
    "    if use_pca:\n",
    "        num_steps.append(('pca', PCA(n_components=0.95)))\n",
    "    numerical_transformer = Pipeline(num_steps)\n",
    "\n",
    "    # Categorical transformer: impute then one-hot encode\n",
    "    cat_steps = [\n",
    "        ('imputer', SimpleImputer(strategy='most_frequent')),\n",
    "        ('encoder', OneHotEncoder(handle_unknown='ignore', sparse=False))\n",
    "    ]\n",
    "    categorical_transformer = Pipeline(cat_steps)\n",
    "\n",
    "    # Column transformer\n",
    "    preprocessor = ColumnTransformer(\n",
    "        transformers=[\n",
    "            ('num', numerical_transformer, numerical_cols),\n",
    "            ('cat', categorical_transformer, categorical_cols)\n",
    "        ],\n",
    "        remainder='drop'\n",
    "    )\n",
    "\n",
    "    pipeline = Pipeline([\n",
    "        ('preprocessor', preprocessor),\n",
    "        ('model', RandomForestRegressor(n_estimators=100, random_state=0))\n",
    "    ])\n",
    "    return pipeline\n",
    "\n",
    "# Function to run full workflow on any dataset\n",
    "\n",
    "def run_workflow(X, y, name):\n",
    "    print(f\"\\n=== {name} Dataset ===\")\n",
    "    # Split data\n",
    "    X_train, X_val, y_train, y_val = train_test_split(\n",
    "        X, y, test_size=0.2, random_state=42\n",
    "    )\n",
    "\n",
    "    # Detect feature types\n",
    "    global numerical_cols, categorical_cols\n",
    "    numerical_cols = X.select_dtypes(include=['int64', 'float64']).columns.tolist()\n",
    "    categorical_cols = X.select_dtypes(include=['object', 'category']).columns.tolist()\n",
    "\n",
    "    # Baseline (median impute numerics, most_frequent for categoricals)\n",
    "    baseline_preprocessor = ColumnTransformer([\n",
    "        ('num', Pipeline([(\"imputer\",SimpleImputer(strategy='median')),\n",
    "                          (\"scaler\", StandardScaler())]), numerical_cols),\n",
    "        ('cat', Pipeline([\n",
    "            ('imputer', SimpleImputer(strategy='most_frequent')),\n",
    "            ('encoder', OneHotEncoder(handle_unknown='ignore', sparse=False))\n",
    "        ]), categorical_cols)\n",
    "    ])\n",
    "    baseline = Pipeline([\n",
    "        ('preprocessor', baseline_preprocessor),\n",
    "        ('model', RandomForestRegressor(n_estimators=100, random_state=0))\n",
    "    ])\n",
    "    baseline.fit(X_train, y_train)\n",
    "    mae_baseline = mean_absolute_error(y_val, baseline.predict(X_val))\n",
    "    print(f\"Baseline MAE: {mae_baseline:.2f}\")\n",
    "\n",
    "    # Pipeline with scaling\n",
    "    pipe_scaled = build_pipeline(use_pca=False)\n",
    "    pipe_scaled.fit(X_train, y_train)\n",
    "    mae_scaled = mean_absolute_error(y_val, pipe_scaled.predict(X_val))\n",
    "    print(f\"Scaled MAE: {mae_scaled:.2f}\")\n",
    "\n",
    "    # Pipeline with PCA\n",
    "    pipe_pca = build_pipeline(use_pca=True)\n",
    "    pipe_pca.fit(X_train, y_train)\n",
    "    mae_pca = mean_absolute_error(y_val, pipe_pca.predict(X_val))\n",
    "    print(f\"PCA MAE: {mae_pca:.2f}\")\n",
    "\n",
    "    # Hyperparameter tuning (imputation strategy and n_estimators, including categorical imputation)\n",
    "    pipeline_tune = build_pipeline(use_pca=False)\n",
    "    param_grid = {\n",
    "        'preprocessor__num__imputer__strategy': ['mean', 'median'],\n",
    "        'preprocessor__cat__imputer__strategy': ['most_frequent', 'constant'],\n",
    "        'model__n_estimators': [50, 100, 200]\n",
    "    }\n",
    "    grid = GridSearchCV(\n",
    "        pipeline_tune,\n",
    "        param_grid,\n",
    "        cv=5,\n",
    "        scoring='neg_mean_absolute_error',\n",
    "        n_jobs=-1\n",
    "    )\n",
    "    grid.fit(X_train, y_train)\n",
    "    best = grid.best_estimator_\n",
    "    mae_best = mean_absolute_error(y_val, best.predict(X_val))\n",
    "    print(f\"Best params: {grid.best_params_}\")\n",
    "    print(f\"Tuned MAE: {mae_best:.2f}\")\n",
    "\n",
    "    # Save best model\n",
    "    filename = f\"best_{name.lower().replace(' ', '_')}_pipeline.pkl\"\n",
    "    pickle.dump(best, open(filename, 'wb'))\n",
    "    print(f\"Saved {filename}\")\n",
    "\n",
    "    # Explore categorical encoders\n",
    "    print(\"Exploring categorical encoders:\")\n",
    "    # recreate numerical transformer for fair comparison\n",
    "    num_pipe = Pipeline([\n",
    "        ('imputer', SimpleImputer(strategy='median')),\n",
    "        ('scaler', StandardScaler())\n",
    "    ])\n",
    "    for enc_name, encoder in [\n",
    "        ('OneHotEncoder', OneHotEncoder(handle_unknown='ignore', sparse=False)),\n",
    "        ('OrdinalEncoder', OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1))\n",
    "    ]:\n",
    "        cat_pipe = Pipeline([\n",
    "            ('imputer', SimpleImputer(strategy='most_frequent')),\n",
    "            ('encoder', encoder)\n",
    "        ])\n",
    "        preproc_enc = ColumnTransformer([\n",
    "            ('num', num_pipe, numerical_cols),\n",
    "            ('cat', cat_pipe, categorical_cols)\n",
    "        ], remainder='drop')\n",
    "        pipe_enc = Pipeline([\n",
    "            ('preprocessor', preproc_enc),\n",
    "            ('model', RandomForestRegressor(n_estimators=100, random_state=0))\n",
    "        ])\n",
    "        pipe_enc.fit(X_train, y_train)\n",
    "        mae_enc = mean_absolute_error(y_val, pipe_enc.predict(X_val))\n",
    "        print(f\"  {enc_name} MAE: {mae_enc:.2f}\")\n",
    "\n",
    "    # Plot PCA explained variance if used\n",
    "    if hasattr(pipe_pca.named_steps['preprocessor'].named_transformers_['num'], 'named_steps'):\n",
    "        pca_comp = pipe_pca.named_steps['preprocessor']\\\n",
    "            .named_transformers_['num']\\\n",
    "            .named_steps.get('pca')\n",
    "        if pca_comp is not None:\n",
    "            evr = pca_comp.explained_variance_ratio_\n",
    "            plt.figure(figsize=(6,4))\n",
    "            plt.bar(range(1, len(evr)+1), evr)\n",
    "            plt.title(f\"{name}: PCA Explained Variance Ratio\")\n",
    "            plt.xlabel('Component')\n",
    "            plt.ylabel('Variance Ratio')\n",
    "            plt.show()\n",
    "\n",
    "from sklearn.datasets import fetch_california_housing\n",
    "# California Housing\n",
    "ca = pd.read_csv(\"/kaggle/input/california-housing-prices/housing.csv\")\n",
    "X_cal = ca.drop(\"median_house_value\", axis=1)\n",
    "y_cal = ca[\"median_house_value\"]\n",
    "run_workflow(X_cal, y_cal, 'California Housing')"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "authorship_tag": "ABX9TyNCAeOVhVMayWFYYFtMVkK5",
   "provenance": []
  },
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5227,
     "sourceId": 7876,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 108980,
     "sourceId": 260251,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 375.917087,
   "end_time": "2025-05-08T16:37:47.044163",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-08T16:31:31.127076",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0ce7f59a0ff948348da61c4f67671a4e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "TextStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "TextStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1c10edc8fdb54032955c7b142fb81340": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "217a5b35b0934705b93cf07cd7ce08f7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "28ad0417fad748e4a070e1f1b8f553e1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4f1e085b9b3d4d1eb0ccd124be57deea": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6f3a4472da8f47cfbb19dd1e9269cdc9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "79503fcc38d44dc29088bcee1e8aab70": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "TextStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "TextStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "862eadaa9f7241b395d633c1ce58329e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9e1c41c9a2d04707b5cf8129295c29f3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ButtonModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ButtonModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ButtonView",
       "button_style": "",
       "description": "Login",
       "disabled": false,
       "icon": "",
       "layout": "IPY_MODEL_1c10edc8fdb54032955c7b142fb81340",
       "style": "IPY_MODEL_d7a35b73a00c4d7596e7d621fdfaab67",
       "tabbable": null,
       "tooltip": null
      }
     },
     "af4caa79a9294286aaa9e862ab7de88b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "VBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "VBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_b6df8eda9d7b4204a339187ceb884a07",
        "IPY_MODEL_f3cf5b3ef5ec41a38e5fd796a7e85c43",
        "IPY_MODEL_e2b9914baa9c4732bc5ca6793a18b6c9",
        "IPY_MODEL_9e1c41c9a2d04707b5cf8129295c29f3",
        "IPY_MODEL_ecf8007c73cf475c9c1e1bd73065c859"
       ],
       "layout": "IPY_MODEL_cdef777047384613a9ea6d568026e982",
       "tabbable": null,
       "tooltip": null
      }
     },
     "b6df8eda9d7b4204a339187ceb884a07": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6f3a4472da8f47cfbb19dd1e9269cdc9",
       "placeholder": "â€‹",
       "style": "IPY_MODEL_4f1e085b9b3d4d1eb0ccd124be57deea",
       "tabbable": null,
       "tooltip": null,
       "value": "<center> <img\nsrc=https://www.kaggle.com/static/images/site-logo.png\nalt='Kaggle'> <br> Create an API token from <a\nhref=\"https://www.kaggle.com/settings/account\" target=\"_blank\">your Kaggle\nsettings page</a> and paste it below along with your Kaggle username. <br> </center>"
      }
     },
     "cdef777047384613a9ea6d568026e982": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": "center",
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "flex",
       "flex": null,
       "flex_flow": "column",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "50%"
      }
     },
     "d7a35b73a00c4d7596e7d621fdfaab67": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ButtonStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ButtonStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "button_color": null,
       "font_family": null,
       "font_size": null,
       "font_style": null,
       "font_variant": null,
       "font_weight": null,
       "text_color": null,
       "text_decoration": null
      }
     },
     "e2b9914baa9c4732bc5ca6793a18b6c9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "PasswordModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "PasswordModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "PasswordView",
       "continuous_update": true,
       "description": "Token:",
       "description_allow_html": false,
       "disabled": false,
       "layout": "IPY_MODEL_28ad0417fad748e4a070e1f1b8f553e1",
       "placeholder": "â€‹",
       "style": "IPY_MODEL_0ce7f59a0ff948348da61c4f67671a4e",
       "tabbable": null,
       "tooltip": null,
       "value": ""
      }
     },
     "ecf8007c73cf475c9c1e1bd73065c859": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_862eadaa9f7241b395d633c1ce58329e",
       "placeholder": "â€‹",
       "style": "IPY_MODEL_ee92e94e3dc64beab2cc6129844e3158",
       "tabbable": null,
       "tooltip": null,
       "value": "\n<b>Thank You</b></center>"
      }
     },
     "ee92e94e3dc64beab2cc6129844e3158": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f3cf5b3ef5ec41a38e5fd796a7e85c43": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "TextModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "TextModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "TextView",
       "continuous_update": true,
       "description": "Username:",
       "description_allow_html": false,
       "disabled": false,
       "layout": "IPY_MODEL_217a5b35b0934705b93cf07cd7ce08f7",
       "placeholder": "â€‹",
       "style": "IPY_MODEL_79503fcc38d44dc29088bcee1e8aab70",
       "tabbable": null,
       "tooltip": null,
       "value": ""
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
