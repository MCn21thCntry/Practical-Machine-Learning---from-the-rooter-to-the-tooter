{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5407,"databundleVersionId":868283,"sourceType":"competition"},{"sourceId":4852390,"sourceType":"datasetVersion","datasetId":33080}],"dockerImageVersionId":30918,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:43:45.496859Z","iopub.execute_input":"2025-04-10T21:43:45.497157Z","iopub.status.idle":"2025-04-10T21:43:46.721810Z","shell.execute_reply.started":"2025-04-10T21:43:45.497128Z","shell.execute_reply":"2025-04-10T21:43:46.720676Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/house-prices-advanced-regression-techniques/sample_submission.csv\n/kaggle/input/house-prices-advanced-regression-techniques/data_description.txt\n/kaggle/input/house-prices-advanced-regression-techniques/train.csv\n/kaggle/input/house-prices-advanced-regression-techniques/test.csv\n/kaggle/input/vehicle-dataset-from-cardekho/car data.csv\n/kaggle/input/vehicle-dataset-from-cardekho/car details v4.csv\n/kaggle/input/vehicle-dataset-from-cardekho/CAR DETAILS FROM CAR DEKHO.csv\n/kaggle/input/vehicle-dataset-from-cardekho/Car details v3.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"# Deep Dive into Random Forests and Bagging Versatility - Regression and Classification","metadata":{}},{"cell_type":"markdown","source":"## A: Hyperparameter Tuning Challenge (Regression or Classification)\n\n* ### Select either the House Price Regression task OR the Digits Classification task from this module.\n* I chose both of them as follow.","metadata":{}},{"cell_type":"code","source":"house_df = pd.read_csv(\"/kaggle/input/house-prices-advanced-regression-techniques/train.csv\")\n\nfrom sklearn.datasets import load_digits\ndigits_df = load_digits()\ndigits_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:43:46.722866Z","iopub.execute_input":"2025-04-10T21:43:46.723375Z","iopub.status.idle":"2025-04-10T21:43:48.219551Z","shell.execute_reply.started":"2025-04-10T21:43:46.723340Z","shell.execute_reply":"2025-04-10T21:43:48.218300Z"}},"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"{'data': array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],\n        [ 0.,  0.,  0., ..., 10.,  0.,  0.],\n        [ 0.,  0.,  0., ..., 16.,  9.,  0.],\n        ...,\n        [ 0.,  0.,  1., ...,  6.,  0.,  0.],\n        [ 0.,  0.,  2., ..., 12.,  0.,  0.],\n        [ 0.,  0., 10., ..., 12.,  1.,  0.]]),\n 'target': array([0, 1, 2, ..., 8, 9, 8]),\n 'frame': None,\n 'feature_names': ['pixel_0_0',\n  'pixel_0_1',\n  'pixel_0_2',\n  'pixel_0_3',\n  'pixel_0_4',\n  'pixel_0_5',\n  'pixel_0_6',\n  'pixel_0_7',\n  'pixel_1_0',\n  'pixel_1_1',\n  'pixel_1_2',\n  'pixel_1_3',\n  'pixel_1_4',\n  'pixel_1_5',\n  'pixel_1_6',\n  'pixel_1_7',\n  'pixel_2_0',\n  'pixel_2_1',\n  'pixel_2_2',\n  'pixel_2_3',\n  'pixel_2_4',\n  'pixel_2_5',\n  'pixel_2_6',\n  'pixel_2_7',\n  'pixel_3_0',\n  'pixel_3_1',\n  'pixel_3_2',\n  'pixel_3_3',\n  'pixel_3_4',\n  'pixel_3_5',\n  'pixel_3_6',\n  'pixel_3_7',\n  'pixel_4_0',\n  'pixel_4_1',\n  'pixel_4_2',\n  'pixel_4_3',\n  'pixel_4_4',\n  'pixel_4_5',\n  'pixel_4_6',\n  'pixel_4_7',\n  'pixel_5_0',\n  'pixel_5_1',\n  'pixel_5_2',\n  'pixel_5_3',\n  'pixel_5_4',\n  'pixel_5_5',\n  'pixel_5_6',\n  'pixel_5_7',\n  'pixel_6_0',\n  'pixel_6_1',\n  'pixel_6_2',\n  'pixel_6_3',\n  'pixel_6_4',\n  'pixel_6_5',\n  'pixel_6_6',\n  'pixel_6_7',\n  'pixel_7_0',\n  'pixel_7_1',\n  'pixel_7_2',\n  'pixel_7_3',\n  'pixel_7_4',\n  'pixel_7_5',\n  'pixel_7_6',\n  'pixel_7_7'],\n 'target_names': array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n 'images': array([[[ 0.,  0.,  5., ...,  1.,  0.,  0.],\n         [ 0.,  0., 13., ..., 15.,  5.,  0.],\n         [ 0.,  3., 15., ..., 11.,  8.,  0.],\n         ...,\n         [ 0.,  4., 11., ..., 12.,  7.,  0.],\n         [ 0.,  2., 14., ..., 12.,  0.,  0.],\n         [ 0.,  0.,  6., ...,  0.,  0.,  0.]],\n \n        [[ 0.,  0.,  0., ...,  5.,  0.,  0.],\n         [ 0.,  0.,  0., ...,  9.,  0.,  0.],\n         [ 0.,  0.,  3., ...,  6.,  0.,  0.],\n         ...,\n         [ 0.,  0.,  1., ...,  6.,  0.,  0.],\n         [ 0.,  0.,  1., ...,  6.,  0.,  0.],\n         [ 0.,  0.,  0., ..., 10.,  0.,  0.]],\n \n        [[ 0.,  0.,  0., ..., 12.,  0.,  0.],\n         [ 0.,  0.,  3., ..., 14.,  0.,  0.],\n         [ 0.,  0.,  8., ..., 16.,  0.,  0.],\n         ...,\n         [ 0.,  9., 16., ...,  0.,  0.,  0.],\n         [ 0.,  3., 13., ..., 11.,  5.,  0.],\n         [ 0.,  0.,  0., ..., 16.,  9.,  0.]],\n \n        ...,\n \n        [[ 0.,  0.,  1., ...,  1.,  0.,  0.],\n         [ 0.,  0., 13., ...,  2.,  1.,  0.],\n         [ 0.,  0., 16., ..., 16.,  5.,  0.],\n         ...,\n         [ 0.,  0., 16., ..., 15.,  0.,  0.],\n         [ 0.,  0., 15., ..., 16.,  0.,  0.],\n         [ 0.,  0.,  2., ...,  6.,  0.,  0.]],\n \n        [[ 0.,  0.,  2., ...,  0.,  0.,  0.],\n         [ 0.,  0., 14., ..., 15.,  1.,  0.],\n         [ 0.,  4., 16., ..., 16.,  7.,  0.],\n         ...,\n         [ 0.,  0.,  0., ..., 16.,  2.,  0.],\n         [ 0.,  0.,  4., ..., 16.,  2.,  0.],\n         [ 0.,  0.,  5., ..., 12.,  0.,  0.]],\n \n        [[ 0.,  0., 10., ...,  1.,  0.,  0.],\n         [ 0.,  2., 16., ...,  1.,  0.,  0.],\n         [ 0.,  0., 15., ..., 15.,  0.,  0.],\n         ...,\n         [ 0.,  4., 16., ..., 16.,  6.,  0.],\n         [ 0.,  8., 16., ..., 16.,  8.,  0.],\n         [ 0.,  1.,  8., ..., 12.,  1.,  0.]]]),\n 'DESCR': \".. _digits_dataset:\\n\\nOptical recognition of handwritten digits dataset\\n--------------------------------------------------\\n\\n**Data Set Characteristics:**\\n\\n    :Number of Instances: 1797\\n    :Number of Attributes: 64\\n    :Attribute Information: 8x8 image of integer pixels in the range 0..16.\\n    :Missing Attribute Values: None\\n    :Creator: E. Alpaydin (alpaydin '@' boun.edu.tr)\\n    :Date: July; 1998\\n\\nThis is a copy of the test set of the UCI ML hand-written digits datasets\\nhttps://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits\\n\\nThe data set contains images of hand-written digits: 10 classes where\\neach class refers to a digit.\\n\\nPreprocessing programs made available by NIST were used to extract\\nnormalized bitmaps of handwritten digits from a preprinted form. From a\\ntotal of 43 people, 30 contributed to the training set and different 13\\nto the test set. 32x32 bitmaps are divided into nonoverlapping blocks of\\n4x4 and the number of on pixels are counted in each block. This generates\\nan input matrix of 8x8 where each element is an integer in the range\\n0..16. This reduces dimensionality and gives invariance to small\\ndistortions.\\n\\nFor info on NIST preprocessing routines, see M. D. Garris, J. L. Blue, G.\\nT. Candela, D. L. Dimmick, J. Geist, P. J. Grother, S. A. Janet, and C.\\nL. Wilson, NIST Form-Based Handprint Recognition System, NISTIR 5469,\\n1994.\\n\\n.. topic:: References\\n\\n  - C. Kaynak (1995) Methods of Combining Multiple Classifiers and Their\\n    Applications to Handwritten Digit Recognition, MSc Thesis, Institute of\\n    Graduate Studies in Science and Engineering, Bogazici University.\\n  - E. Alpaydin, C. Kaynak (1998) Cascading Classifiers, Kybernetika.\\n  - Ken Tang and Ponnuthurai N. Suganthan and Xi Yao and A. Kai Qin.\\n    Linear dimensionalityreduction using relevance weighted LDA. School of\\n    Electrical and Electronic Engineering Nanyang Technological University.\\n    2005.\\n  - Claudio Gentile. A New Approximate Maximal Margin Classification\\n    Algorithm. NIPS. 2000.\\n\"}"},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"X_digits, y_digits = digits_df.data, digits_df.target","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:43:48.220574Z","iopub.execute_input":"2025-04-10T21:43:48.221108Z","iopub.status.idle":"2025-04-10T21:43:48.225724Z","shell.execute_reply.started":"2025-04-10T21:43:48.221061Z","shell.execute_reply":"2025-04-10T21:43:48.224489Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"# Split the data into training and validation sets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\n\nX_train_digits, X_val_digits, y_train_digits, y_val_digits = train_test_split(X_digits, y_digits, test_size=0.2, random_state=21)\n\ny = house_df[\"SalePrice\"]\nnumeric_features = house_df.select_dtypes(include=np.number)\nX = numeric_features.drop(\"SalePrice\", axis=1)\nimputer = SimpleImputer(strategy=\"mean\")\nX = imputer.fit_transform(X)\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=21)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:43:48.228032Z","iopub.execute_input":"2025-04-10T21:43:48.228460Z","iopub.status.idle":"2025-04-10T21:43:48.630291Z","shell.execute_reply.started":"2025-04-10T21:43:48.228421Z","shell.execute_reply":"2025-04-10T21:43:48.629184Z"}},"outputs":[],"execution_count":4},{"cell_type":"markdown","source":"\n* **Systematic Hyperparameter Tuning:** Instead of manual exploration, use a systematic approach to hyperparameter tuning. Choose either **Grid Search** (GridSearchCV) or **Randomized Search** (RandomizedSearchCV) from scikit-learn to tune hyperparameters for RandomForestRegressor (or RandomForestClassifier). Tune at least **three** hyperparameters (e.g., n_estimators, max_depth, min_samples_split, min_samples_leaf, max_features, criterion, bootstrap).","metadata":{}},{"cell_type":"markdown","source":"### RandomForest","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error, accuracy_score, mean_squared_error\nimport numpy as np\n\nrf_cls = RandomForestClassifier(random_state=21)\nrf_reg = RandomForestRegressor(random_state=21)\n\nrf_cls.fit(X_train_digits, y_train_digits)\nrf_reg.fit(X_train, y_train)\n\nrf_cls_accuracy = accuracy_score(y_val_digits, rf_cls.predict(X_val_digits))\nrf_reg_mae = mean_absolute_error(y_val, rf_reg.predict(X_val))\nrf_reg_mse = mean_squared_error(y_val, rf_reg.predict(X_val))\n\nprint(\"rf_cls_accuracy: \", rf_cls_accuracy)\nprint(\"rf_reg_mae: \", rf_reg_mae)\nprint(\"rf_reg_rmse: \", np.sqrt(rf_reg_mse))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:43:48.632032Z","iopub.execute_input":"2025-04-10T21:43:48.632422Z","iopub.status.idle":"2025-04-10T21:43:50.671985Z","shell.execute_reply.started":"2025-04-10T21:43:48.632387Z","shell.execute_reply":"2025-04-10T21:43:50.671018Z"}},"outputs":[{"name":"stdout","text":"rf_cls_accuracy:  0.9722222222222222\nrf_reg_mae:  17877.613595890412\nrf_reg_rmse:  34386.397400106805\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"print(\"Clf parameters: \", rf_cls.get_params())\nprint(\"Clf parameters: \", rf_cls.n_estimators, rf_cls.max_depth, rf_cls.max_features)\nprint(\"Reg parameters: \", rf_reg.get_params())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:43:50.673006Z","iopub.execute_input":"2025-04-10T21:43:50.673403Z","iopub.status.idle":"2025-04-10T21:43:50.680930Z","shell.execute_reply.started":"2025-04-10T21:43:50.673368Z","shell.execute_reply":"2025-04-10T21:43:50.679821Z"}},"outputs":[{"name":"stdout","text":"Clf parameters:  {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': None, 'oob_score': False, 'random_state': 21, 'verbose': 0, 'warm_start': False}\nClf parameters:  100 None sqrt\nReg parameters:  {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': None, 'oob_score': False, 'random_state': 21, 'verbose': 0, 'warm_start': False}\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"* **Evaluate Best Model:** After tuning, evaluate the performance of your \"best\" Random Forest model (found by Grid Search or Randomized Search) on the validation set (or a separate test set if you create one). Report the best hyperparameters found and the corresponding performance (MAE for regression, Accuracy for classification).\n    * **Compare to Baseline:** Compare the performance of your tuned Random Forest model to the baseline Random Forest model (with default hyperparameters) from this module and to the best performing Bagging model you identified in your performance comparison analysis. Did hyperparameter tuning significantly improve performance beyond Bagging or the baseline Random Forest?","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n\nclf_param_grid = {\"n_estimators\": [50, 100, 250],\n                 \"max_depth\": [None, 10, 20, 30],\n                 \"max_features\": [\"sqrt\", \"log2\"]}\nreg_param_dist = {\"n_estimators\": [50, 100, 150, 200],\n                 \"max_depth\": [None, 10, 20, 30, 40],\n                 \"min_samples_split\": [2, 5, 10],\n                 \"min_samples_leaf\": [1, 2, 4],\n                 \"max_features\": [\"auto\", \"sqrt\", \"log2\"]}\ngrid_search = GridSearchCV(RandomForestClassifier(random_state=21),\n                          clf_param_grid,\n                          cv=5,\n                          scoring=\"accuracy\",\n                          n_jobs=-1)\ngrid_search.fit(X_train_digits, y_train_digits)\nprint(\"RF Classification best params: \",    grid_search.best_params_)\ntuned_clf_accuracy = accuracy_score(y_val_digits, grid_search.predict(X_val_digits))\nprint(\"Tuned Classification accuracy: \",    tuned_clf_accuracy)\n\nrandom_search = RandomizedSearchCV(estimator=RandomForestRegressor(random_state=21),\n                              param_distributions=reg_param_dist,\n                              n_iter=20, # # number of parameter settings that are sampled\n                              cv=5,\n                              scoring=\"neg_mean_absolute_error\",\n                              random_state=21,\n                              n_jobs=-1)\nrandom_search.fit(X_train, y_train)\nprint(\"RF Regression best params: \",    random_search.best_params_)\ntuned_reg_mae = mean_absolute_error(y_val, random_search.predict(X_val))\nprint(\"Tuned Regression mae: \",    tuned_reg_mae)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:43:50.682012Z","iopub.execute_input":"2025-04-10T21:43:50.682568Z","iopub.status.idle":"2025-04-10T21:44:43.413890Z","shell.execute_reply.started":"2025-04-10T21:43:50.682524Z","shell.execute_reply":"2025-04-10T21:44:43.412842Z"}},"outputs":[{"name":"stdout","text":"RF Classification best params:  {'max_depth': 10, 'max_features': 'log2', 'n_estimators': 100}\nTuned Classification accuracy:  0.9638888888888889\nRF Regression best params:  {'n_estimators': 100, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_features': 'log2', 'max_depth': 40}\nTuned Regression mae:  18440.296678082195\n","output_type":"stream"}],"execution_count":7},{"cell_type":"markdown","source":"### It looks like hyperparameter optimization/tuning has unintended blowback! However, dont forget that we couldn't perpend on preprocessing stage which the most important part of ml modelling.","metadata":{}},{"cell_type":"markdown","source":"### Bagging","metadata":{}},{"cell_type":"code","source":"!pip install lazypredict\nfrom lazypredict.Supervised import LazyRegressor\nfrom lazypredict.Supervised import LazyClassifier\nfrom lightgbm import LGBMClassifier, LGBMRegressor\n\nclf = LazyClassifier(predictions=True)\nclf_models, clf_predictions = clf.fit(X_train_digits, X_val_digits, y_train_digits, y_val_digits)\nprint(f\"Classification Models Performance:\\n {clf_models}\")\n\nreg = LazyRegressor(predictions=True)\nreg_models, reg_predicitions = reg.fit(X_train, X_val, y_train, y_val)\nprint(f\"Regression Models Performance:\\n {reg_models}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:44:43.415226Z","iopub.execute_input":"2025-04-10T21:44:43.415546Z","iopub.status.idle":"2025-04-10T21:45:17.759063Z","shell.execute_reply.started":"2025-04-10T21:44:43.415518Z","shell.execute_reply":"2025-04-10T21:45:17.757935Z"}},"outputs":[{"name":"stdout","text":"Collecting lazypredict\n  Downloading lazypredict-0.2.16-py2.py3-none-any.whl.metadata (13 kB)\nRequirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from lazypredict) (8.1.7)\nRequirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from lazypredict) (1.2.2)\nRequirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from lazypredict) (2.2.3)\nRequirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from lazypredict) (4.67.1)\nRequirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from lazypredict) (1.4.2)\nRequirement already satisfied: lightgbm in /usr/local/lib/python3.10/dist-packages (from lazypredict) (4.5.0)\nRequirement already satisfied: xgboost in /usr/local/lib/python3.10/dist-packages (from lazypredict) (2.0.3)\nCollecting pytest-runner (from lazypredict)\n  Downloading pytest_runner-6.0.1-py3-none-any.whl.metadata (7.3 kB)\nCollecting mlflow>=2.0.0 (from lazypredict)\n  Downloading mlflow-2.21.3-py3-none-any.whl.metadata (30 kB)\nCollecting mlflow-skinny==2.21.3 (from mlflow>=2.0.0->lazypredict)\n  Downloading mlflow_skinny-2.21.3-py3-none-any.whl.metadata (31 kB)\nRequirement already satisfied: Flask<4 in /usr/local/lib/python3.10/dist-packages (from mlflow>=2.0.0->lazypredict) (3.1.0)\nRequirement already satisfied: Jinja2<4,>=2.11 in /usr/local/lib/python3.10/dist-packages (from mlflow>=2.0.0->lazypredict) (3.1.4)\nRequirement already satisfied: alembic!=1.10.0,<2 in /usr/local/lib/python3.10/dist-packages (from mlflow>=2.0.0->lazypredict) (1.14.1)\nRequirement already satisfied: docker<8,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow>=2.0.0->lazypredict) (7.1.0)\nCollecting graphene<4 (from mlflow>=2.0.0->lazypredict)\n  Downloading graphene-3.4.3-py2.py3-none-any.whl.metadata (6.9 kB)\nCollecting gunicorn<24 (from mlflow>=2.0.0->lazypredict)\n  Downloading gunicorn-23.0.0-py3-none-any.whl.metadata (4.4 kB)\nRequirement already satisfied: markdown<4,>=3.3 in /usr/local/lib/python3.10/dist-packages (from mlflow>=2.0.0->lazypredict) (3.7)\nRequirement already satisfied: matplotlib<4 in /usr/local/lib/python3.10/dist-packages (from mlflow>=2.0.0->lazypredict) (3.7.5)\nRequirement already satisfied: numpy<3 in /usr/local/lib/python3.10/dist-packages (from mlflow>=2.0.0->lazypredict) (1.26.4)\nRequirement already satisfied: pyarrow<20,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow>=2.0.0->lazypredict) (19.0.1)\nRequirement already satisfied: scipy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow>=2.0.0->lazypredict) (1.13.1)\nRequirement already satisfied: sqlalchemy<3,>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow>=2.0.0->lazypredict) (2.0.36)\nRequirement already satisfied: cachetools<6,>=5.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (5.5.0)\nRequirement already satisfied: cloudpickle<4 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (3.1.0)\nCollecting databricks-sdk<1,>=0.20.0 (from mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict)\n  Downloading databricks_sdk-0.49.0-py3-none-any.whl.metadata (38 kB)\nCollecting fastapi<1 (from mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict)\n  Downloading fastapi-0.115.12-py3-none-any.whl.metadata (27 kB)\nRequirement already satisfied: gitpython<4,>=3.1.9 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (3.1.43)\nRequirement already satisfied: importlib_metadata!=4.7.0,<9,>=3.7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (8.5.0)\nRequirement already satisfied: opentelemetry-api<3,>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (1.29.0)\nRequirement already satisfied: opentelemetry-sdk<3,>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (1.29.0)\nRequirement already satisfied: packaging<25 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (24.2)\nRequirement already satisfied: protobuf<6,>=3.12.0 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (3.20.3)\nRequirement already satisfied: pydantic<3,>=1.10.8 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (2.11.0a2)\nRequirement already satisfied: pyyaml<7,>=5.1 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (6.0.2)\nRequirement already satisfied: requests<3,>=2.17.3 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (2.32.3)\nRequirement already satisfied: sqlparse<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (0.5.3)\nRequirement already satisfied: typing-extensions<5,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (4.12.2)\nCollecting uvicorn<1 (from mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict)\n  Downloading uvicorn-0.34.0-py3-none-any.whl.metadata (6.5 kB)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas->lazypredict) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->lazypredict) (2025.1)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas->lazypredict) (2025.1)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->lazypredict) (3.5.0)\nRequirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow>=2.0.0->lazypredict) (1.3.9)\nRequirement already satisfied: urllib3>=1.26.0 in /usr/local/lib/python3.10/dist-packages (from docker<8,>=4.0.0->mlflow>=2.0.0->lazypredict) (2.3.0)\nRequirement already satisfied: Werkzeug>=3.1 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow>=2.0.0->lazypredict) (3.1.3)\nRequirement already satisfied: itsdangerous>=2.2 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow>=2.0.0->lazypredict) (2.2.0)\nRequirement already satisfied: blinker>=1.9 in /usr/local/lib/python3.10/dist-packages (from Flask<4->mlflow>=2.0.0->lazypredict) (1.9.0)\nCollecting graphql-core<3.3,>=3.1 (from graphene<4->mlflow>=2.0.0->lazypredict)\n  Downloading graphql_core-3.2.6-py3-none-any.whl.metadata (11 kB)\nCollecting graphql-relay<3.3,>=3.1 (from graphene<4->mlflow>=2.0.0->lazypredict)\n  Downloading graphql_relay-3.2.0-py3-none-any.whl.metadata (12 kB)\nRequirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2<4,>=2.11->mlflow>=2.0.0->lazypredict) (3.0.2)\nRequirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow>=2.0.0->lazypredict) (1.3.1)\nRequirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow>=2.0.0->lazypredict) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow>=2.0.0->lazypredict) (4.55.3)\nRequirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow>=2.0.0->lazypredict) (1.4.7)\nRequirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow>=2.0.0->lazypredict) (11.0.0)\nRequirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow>=2.0.0->lazypredict) (3.2.0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy<3->mlflow>=2.0.0->lazypredict) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy<3->mlflow>=2.0.0->lazypredict) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy<3->mlflow>=2.0.0->lazypredict) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy<3->mlflow>=2.0.0->lazypredict) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy<3->mlflow>=2.0.0->lazypredict) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy<3->mlflow>=2.0.0->lazypredict) (2.4.1)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas->lazypredict) (1.17.0)\nRequirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy<3,>=1.4.0->mlflow>=2.0.0->lazypredict) (3.1.1)\nRequirement already satisfied: google-auth~=2.0 in /usr/local/lib/python3.10/dist-packages (from databricks-sdk<1,>=0.20.0->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (2.27.0)\nCollecting starlette<0.47.0,>=0.40.0 (from fastapi<1->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict)\n  Downloading starlette-0.46.1-py3-none-any.whl.metadata (6.2 kB)\nRequirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from gitpython<4,>=3.1.9->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (4.0.11)\nRequirement already satisfied: zipp>=3.20 in /usr/local/lib/python3.10/dist-packages (from importlib_metadata!=4.7.0,<9,>=3.7.0->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (3.21.0)\nRequirement already satisfied: deprecated>=1.2.6 in /usr/local/lib/python3.10/dist-packages (from opentelemetry-api<3,>=1.9.0->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (1.2.15)\nRequirement already satisfied: opentelemetry-semantic-conventions==0.50b0 in /usr/local/lib/python3.10/dist-packages (from opentelemetry-sdk<3,>=1.9.0->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (0.50b0)\nRequirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from pydantic<3,>=1.10.8->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (0.7.0)\nRequirement already satisfied: pydantic-core==2.29.0 in /usr/local/lib/python3.10/dist-packages (from pydantic<3,>=1.10.8->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (2.29.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (3.4.1)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (3.10)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (2025.1.31)\nRequirement already satisfied: h11>=0.8 in /usr/local/lib/python3.10/dist-packages (from uvicorn<1->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (0.14.0)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy<3->mlflow>=2.0.0->lazypredict) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy<3->mlflow>=2.0.0->lazypredict) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy<3->mlflow>=2.0.0->lazypredict) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy<3->mlflow>=2.0.0->lazypredict) (2024.2.0)\nRequirement already satisfied: wrapt<2,>=1.10 in /usr/local/lib/python3.10/dist-packages (from deprecated>=1.2.6->opentelemetry-api<3,>=1.9.0->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (1.17.0)\nRequirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->gitpython<4,>=3.1.9->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (5.0.1)\nRequirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth~=2.0->databricks-sdk<1,>=0.20.0->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (0.4.1)\nRequirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth~=2.0->databricks-sdk<1,>=0.20.0->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (4.9)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy<3->mlflow>=2.0.0->lazypredict) (2024.2.0)\nRequirement already satisfied: anyio<5,>=3.6.2 in /usr/local/lib/python3.10/dist-packages (from starlette<0.47.0,>=0.40.0->fastapi<1->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (3.7.1)\nRequirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.6.2->starlette<0.47.0,>=0.40.0->fastapi<1->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (1.3.1)\nRequirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.6.2->starlette<0.47.0,>=0.40.0->fastapi<1->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (1.2.2)\nRequirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth~=2.0->databricks-sdk<1,>=0.20.0->mlflow-skinny==2.21.3->mlflow>=2.0.0->lazypredict) (0.6.1)\nDownloading lazypredict-0.2.16-py2.py3-none-any.whl (14 kB)\nDownloading mlflow-2.21.3-py3-none-any.whl (28.2 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m28.2/28.2 MB\u001b[0m \u001b[31m53.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading mlflow_skinny-2.21.3-py3-none-any.whl (6.1 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.1/6.1 MB\u001b[0m \u001b[31m80.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n\u001b[?25hDownloading pytest_runner-6.0.1-py3-none-any.whl (7.2 kB)\nDownloading graphene-3.4.3-py2.py3-none-any.whl (114 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m114.9/114.9 kB\u001b[0m \u001b[31m5.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading gunicorn-23.0.0-py3-none-any.whl (85 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m85.0/85.0 kB\u001b[0m \u001b[31m4.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading databricks_sdk-0.49.0-py3-none-any.whl (683 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m684.0/684.0 kB\u001b[0m \u001b[31m28.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading fastapi-0.115.12-py3-none-any.whl (95 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m95.2/95.2 kB\u001b[0m \u001b[31m5.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading graphql_core-3.2.6-py3-none-any.whl (203 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m203.4/203.4 kB\u001b[0m \u001b[31m10.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading graphql_relay-3.2.0-py3-none-any.whl (16 kB)\nDownloading uvicorn-0.34.0-py3-none-any.whl (62 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.3/62.3 kB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading starlette-0.46.1-py3-none-any.whl (71 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m72.0/72.0 kB\u001b[0m \u001b[31m3.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hInstalling collected packages: uvicorn, pytest-runner, gunicorn, graphql-core, starlette, graphql-relay, graphene, fastapi, databricks-sdk, mlflow-skinny, mlflow, lazypredict\nSuccessfully installed databricks-sdk-0.49.0 fastapi-0.115.12 graphene-3.4.3 graphql-core-3.2.6 graphql-relay-3.2.0 gunicorn-23.0.0 lazypredict-0.2.16 mlflow-2.21.3 mlflow-skinny-2.21.3 pytest-runner-6.0.1 starlette-0.46.1 uvicorn-0.34.0\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/29 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"42989e4351b04a74a6777c2cc33d6dde"}},"metadata":{}},{"name":"stdout","text":"[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000648 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 886\n[LightGBM] [Info] Number of data points in the train set: 1437, number of used features: 53\n[LightGBM] [Info] Start training from score -2.286706\n[LightGBM] [Info] Start training from score -2.286706\n[LightGBM] [Info] Start training from score -2.279880\n[LightGBM] [Info] Start training from score -2.314486\n[LightGBM] [Info] Start training from score -2.266367\n[LightGBM] [Info] Start training from score -2.357658\n[LightGBM] [Info] Start training from score -2.266367\n[LightGBM] [Info] Start training from score -2.335839\n[LightGBM] [Info] Start training from score -2.387511\n[LightGBM] [Info] Start training from score -2.253033\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\nClassification Models Performance:\n                                Accuracy  Balanced Accuracy ROC AUC  F1 Score  \\\nModel                                                                          \nSVC                                0.98               0.98    None      0.98   \nExtraTreesClassifier               0.98               0.98    None      0.98   \nXGBClassifier                      0.98               0.98    None      0.98   \nLogisticRegression                 0.97               0.98    None      0.97   \nKNeighborsClassifier               0.97               0.97    None      0.98   \nLGBMClassifier                     0.97               0.97    None      0.98   \nRandomForestClassifier             0.97               0.97    None      0.97   \nCalibratedClassifierCV             0.97               0.97    None      0.97   \nLinearSVC                          0.97               0.97    None      0.97   \nPassiveAggressiveClassifier        0.96               0.96    None      0.96   \nLabelSpreading                     0.96               0.95    None      0.96   \nLabelPropagation                   0.96               0.95    None      0.96   \nLinearDiscriminantAnalysis         0.95               0.95    None      0.95   \nNuSVC                              0.95               0.95    None      0.95   \nSGDClassifier                      0.94               0.94    None      0.94   \nBaggingClassifier                  0.94               0.93    None      0.94   \nRidgeClassifierCV                  0.93               0.93    None      0.92   \nRidgeClassifier                    0.92               0.92    None      0.92   \nPerceptron                         0.92               0.92    None      0.92   \nNearestCentroid                    0.88               0.88    None      0.88   \nBernoulliNB                        0.88               0.88    None      0.88   \nDecisionTreeClassifier             0.83               0.83    None      0.83   \nQuadraticDiscriminantAnalysis      0.81               0.79    None      0.79   \nExtraTreeClassifier                0.77               0.78    None      0.78   \nGaussianNB                         0.77               0.76    None      0.77   \nAdaBoostClassifier                 0.25               0.27    None      0.18   \nDummyClassifier                    0.08               0.10    None      0.01   \n\n                               Time Taken  \nModel                                      \nSVC                                  0.12  \nExtraTreesClassifier                 0.30  \nXGBClassifier                        0.42  \nLogisticRegression                   0.10  \nKNeighborsClassifier                 0.07  \nLGBMClassifier                       1.15  \nRandomForestClassifier               0.39  \nCalibratedClassifierCV               1.11  \nLinearSVC                            0.24  \nPassiveAggressiveClassifier          0.09  \nLabelSpreading                       0.37  \nLabelPropagation                     0.38  \nLinearDiscriminantAnalysis           0.08  \nNuSVC                                0.25  \nSGDClassifier                        0.08  \nBaggingClassifier                    0.16  \nRidgeClassifierCV                    0.03  \nRidgeClassifier                      0.04  \nPerceptron                           0.05  \nNearestCentroid                      0.02  \nBernoulliNB                          0.04  \nDecisionTreeClassifier               0.04  \nQuadraticDiscriminantAnalysis        0.04  \nExtraTreeClassifier                  0.02  \nGaussianNB                           0.02  \nAdaBoostClassifier                   0.28  \nDummyClassifier                      0.02  \n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/42 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3a78cbc0ab6e4976ba14cd8e97b9106b"}},"metadata":{}},{"name":"stdout","text":"[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001111 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 3173\n[LightGBM] [Info] Number of data points in the train set: 1168, number of used features: 36\n[LightGBM] [Info] Start training from score 181136.702055\nRegression Models Performance:\n                                Adjusted R-Squared  R-Squared      RMSE  \\\nModel                                                                    \nRandomForestRegressor                        0.81       0.83  33585.51   \nLGBMRegressor                                0.81       0.83  33840.45   \nHistGradientBoostingRegressor                0.81       0.83  33862.37   \nExtraTreesRegressor                          0.80       0.83  34427.43   \nGradientBoostingRegressor                    0.80       0.82  34706.11   \nXGBRegressor                                 0.79       0.82  35288.60   \nBaggingRegressor                             0.78       0.81  36257.04   \nAdaBoostRegressor                            0.75       0.79  38148.95   \nLassoLarsIC                                  0.74       0.77  39149.99   \nLassoLarsCV                                  0.74       0.77  39165.79   \nLassoCV                                      0.74       0.77  39167.77   \nBayesianRidge                                0.74       0.77  39447.63   \nRidgeCV                                      0.74       0.77  39511.66   \nRidge                                        0.74       0.77  39559.14   \nLassoLars                                    0.74       0.77  39563.76   \nLasso                                        0.74       0.77  39563.76   \nLars                                         0.74       0.77  39565.09   \nTransformedTargetRegressor                   0.74       0.77  39569.45   \nLinearRegression                             0.74       0.77  39569.45   \nHuberRegressor                               0.73       0.76  39924.67   \nLarsCV                                       0.73       0.76  39959.13   \nElasticNet                                   0.73       0.76  40237.50   \nSGDRegressor                                 0.73       0.76  40277.05   \nPassiveAggressiveRegressor                   0.73       0.76  40295.88   \nDecisionTreeRegressor                        0.71       0.75  41282.09   \nOrthogonalMatchingPursuitCV                  0.71       0.75  41425.51   \nTweedieRegressor                             0.71       0.74  41585.91   \nKNeighborsRegressor                          0.70       0.73  42391.15   \nOrthogonalMatchingPursuit                    0.68       0.72  43328.32   \nPoissonRegressor                             0.68       0.72  43418.57   \nGammaRegressor                               0.65       0.70  45294.87   \nExtraTreeRegressor                           0.56       0.61  51178.68   \nElasticNetCV                                 0.01       0.14  76360.46   \nDummyRegressor                              -0.15      -0.00  82331.48   \nNuSVR                                       -0.16      -0.01  82674.07   \nSVR                                         -0.19      -0.04  83850.06   \nGaussianProcessRegressor                    -4.70      -3.98 183626.05   \nKernelRidge                                 -4.96      -4.20 187800.15   \nMLPRegressor                                -5.50      -4.67 196053.60   \nLinearSVR                                   -5.56      -4.72 196924.77   \nRANSACRegressor                             -8.81      -7.56 240898.76   \n\n                               Time Taken  \nModel                                      \nRandomForestRegressor                1.43  \nLGBMRegressor                        0.18  \nHistGradientBoostingRegressor        0.54  \nExtraTreesRegressor                  0.82  \nGradientBoostingRegressor            0.61  \nXGBRegressor                         0.26  \nBaggingRegressor                     0.16  \nAdaBoostRegressor                    0.27  \nLassoLarsIC                          0.02  \nLassoLarsCV                          0.05  \nLassoCV                              0.09  \nBayesianRidge                        0.02  \nRidgeCV                              0.02  \nRidge                                0.01  \nLassoLars                            0.02  \nLasso                                0.01  \nLars                                 0.02  \nTransformedTargetRegressor           0.02  \nLinearRegression                     0.01  \nHuberRegressor                       0.04  \nLarsCV                               0.05  \nElasticNet                           0.02  \nSGDRegressor                         0.02  \nPassiveAggressiveRegressor           0.12  \nDecisionTreeRegressor                0.03  \nOrthogonalMatchingPursuitCV          0.02  \nTweedieRegressor                     0.02  \nKNeighborsRegressor                  0.02  \nOrthogonalMatchingPursuit            0.01  \nPoissonRegressor                     0.03  \nGammaRegressor                       0.02  \nExtraTreeRegressor                   0.02  \nElasticNetCV                         0.08  \nDummyRegressor                       0.01  \nNuSVR                                0.08  \nSVR                                  0.11  \nGaussianProcessRegressor             0.16  \nKernelRidge                          0.05  \nMLPRegressor                         1.05  \nLinearSVR                            0.01  \nRANSACRegressor                      0.18  \n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"#from sklearn.liner_model import LinearRegression, LogisticRegression\n#from sklearn.tree import DecisionTreeRegressor, DecisionTreeClassifier\n\"\"\"\nThe following models seem the best models according to LazyReg&Clas.\nSo Let's evaluate which one turns better result to use generating Bagging Model\n\"\"\"\nfrom sklearn.neighbors import KNeighborsRegressor, KNeighborsClassifier\nfrom lightgbm import LGBMRegressor, LGBMClassifier\nfrom xgboost import XGBRegressor, XGBClassifier\nfrom sklearn.tree import ExtraTreeRegressor, ExtraTreeClassifier\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom sklearn.svm import SVR, SVC\n\nKN_clf_model = KNeighborsClassifier()\nKN_clf_model.fit(X_train_digits, y_train_digits)\nKN_reg_model = KNeighborsRegressor()\nKN_reg_model.fit(X_train, y_train)\n\nLgbm_clf_model = LGBMClassifier(verbosity=0)\nLgbm_clf_model.fit(X_train_digits, y_train_digits)\nLgbm_reg_model = LGBMRegressor(verbosity=0)\nLgbm_reg_model.fit(X_train, y_train)\n\nXgboost_clf_model = XGBClassifier()\nXgboost_clf_model.fit(X_train_digits, y_train_digits)\nXgboost_reg_model = XGBRegressor()\nXgboost_reg_model.fit(X_train, y_train)\n\nExtra_clf_model = ExtraTreeClassifier()\nExtra_clf_model.fit(X_train_digits, y_train_digits)\nExtra_reg_model = ExtraTreeRegressor()\nExtra_reg_model.fit(X_train, y_train)\n\nRForest_clf_model = RandomForestClassifier()\nRForest_clf_model.fit(X_train_digits, y_train_digits)\nRForest_reg_model = RandomForestRegressor()\nRForest_reg_model.fit(X_train, y_train)\n\nSVC_model = SVC()\nSVC_model.fit(X_train_digits, y_train_digits)\nSVR_model = SVR()\nSVR_model.fit(X_train, y_train)\n\nclassifiers = [KN_clf_model, Lgbm_clf_model, Xgboost_clf_model, Extra_clf_model, RForest_clf_model, SVC_model]\nregressors = [KN_reg_model, Lgbm_reg_model, Xgboost_reg_model, Extra_reg_model, RForest_reg_model, SVR_model]\n\nclassifiers_accuracies = {}\nfor clf in classifiers:\n    accuracy = accuracy_score(y_val_digits, clf.predict(X_val_digits))\n    classifiers_accuracies[clf.__class__.__name__] = accuracy\n    print(f\"{clf.__class__.__name__} Accuracy: {accuracy}\")\n\nregressors_errors = {}\nfor reg in regressors:\n    predictions = reg.predict(X_val)\n    mae = mean_absolute_error(y_val, predictions)\n    rmse = mean_squared_error(y_val, predictions, squared=False)  # calculate the RMSE\n    print(f\"{reg.__class__.__name__} MAE: {mae}\")\n    print(f\"{reg.__class__.__name__} RMSE: {rmse}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:45:17.760245Z","iopub.execute_input":"2025-04-10T21:45:17.761188Z","iopub.status.idle":"2025-04-10T21:45:21.503311Z","shell.execute_reply.started":"2025-04-10T21:45:17.761141Z","shell.execute_reply":"2025-04-10T21:45:21.502398Z"}},"outputs":[{"name":"stdout","text":"[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\nKNeighborsClassifier Accuracy: 0.9888888888888889\nLGBMClassifier Accuracy: 0.975\nXGBClassifier Accuracy: 0.9777777777777777\nExtraTreeClassifier Accuracy: 0.7611111111111111\nRandomForestClassifier Accuracy: 0.9777777777777777\nSVC Accuracy: 0.9861111111111112\nKNeighborsRegressor MAE: 31373.496575342466\nKNeighborsRegressor RMSE: 51929.040532503954\nLGBMRegressor MAE: 18496.830682088323\nLGBMRegressor RMSE: 34872.86931625686\nXGBRegressor MAE: 18561.858171018837\nXGBRegressor RMSE: 35288.59807122803\nExtraTreeRegressor MAE: 26652.171232876713\nExtraTreeRegressor RMSE: 46836.372049584745\nRandomForestRegressor MAE: 17919.83215753425\nRandomForestRegressor RMSE: 33969.73129421751\nSVR MAE: 56418.75360204448\nSVR RMSE: 83871.5164461483\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"## KNeighborsClassifier is the best for Classification for digits dataset\n## RandomForestRegressor is the best for Regression for Home dataset\n## Then Let's use:\nfrom sklearn.ensemble import BaggingRegressor, BaggingClassifier\n\nbagg_cls = BaggingClassifier(base_estimator=KNeighborsClassifier(), n_estimators=10, random_state=21)\nbagg_cls.fit(X_train_digits, y_train_digits)\nbagg_cls_predictions = bagg_cls.predict(X_val_digits)\nbagg_cls_accuracy = accuracy_score(y_val_digits, bagg_cls_predictions)\nprint(f\"Accuracy: {bagg_cls_accuracy}\")\n\nbagg_reg = BaggingRegressor(base_estimator=RandomForestRegressor(), n_estimators=10, random_state=21)\nbagg_reg.fit(X_train, y_train)\nbagg_reg_predictions = bagg_reg.predict(X_val)\nbagg_reg_rmse = mean_squared_error(y_val, bagg_reg_predictions, squared=False)\nprint(f\"RMSE: {bagg_reg_rmse}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:45:21.504505Z","iopub.execute_input":"2025-04-10T21:45:21.504908Z","iopub.status.idle":"2025-04-10T21:45:30.679273Z","shell.execute_reply.started":"2025-04-10T21:45:21.504870Z","shell.execute_reply":"2025-04-10T21:45:30.678126Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.9861111111111112\nRMSE: 34390.729144300894\n","output_type":"stream"}],"execution_count":10},{"cell_type":"markdown","source":"* ### KNeighborsClassifier and RandomForestRegressor have given the best results so far, even better than BaggingClassifier and BaggingRegressor.","metadata":{}},{"cell_type":"code","source":"KNeighborsclf_param_grid = {\"n_neighbors\": [5, 10, 20, 30],\n                 \"weights\": [\"uniform\", \"distance\"],\n                 \"algorithm\": [\"auto\", \"ball_tree\", \"kd_tree\", \"brute\"],\n                 \"leaf_size\": [10, 20, 30, 40],\n                 \"p\": [1, 2]} # Manhattan Distance or Euclidean Distance\nRForestreg_param_dist = {\"n_estimators\": [50, 100, 150, 200],\n                 \"max_depth\": [None, 10, 20, 30, 40],\n                 \"min_samples_split\": [2, 5, 10],\n                 \"min_samples_leaf\": [1, 2, 4],\n                 \"max_features\": [\"auto\", \"sqrt\", \"log2\"]}\ngrid_search = GridSearchCV(KNeighborsClassifier(),\n                          KNeighborsclf_param_grid,\n                          cv=5,\n                          scoring=\"accuracy\",\n                          n_jobs=-1)\ngrid_search.fit(X_train_digits, y_train_digits)\nprint(\"RF Classification best params: \",    grid_search.best_params_)\ntuned_clf_accuracy = accuracy_score(y_val_digits, grid_search.predict(X_val_digits))\nprint(\"Tuned Classification accuracy: \",    tuned_clf_accuracy)\n\nrandom_search = RandomizedSearchCV(estimator=RandomForestRegressor(random_state=21),\n                              param_distributions = RForestreg_param_dist,\n                              n_iter=20, # # number of parameter settings that are sampled\n                              cv=5,\n                              scoring=\"neg_mean_absolute_error\",\n                              random_state=21,\n                              n_jobs=-1)\nrandom_search.fit(X_train, y_train)\nprint(\"RF Regression best params: \",    random_search.best_params_)\ntuned_reg_mae = mean_absolute_error(y_val, random_search.predict(X_val))\nprint(\"Tuned Regression mae: \",    tuned_reg_mae)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:45:30.680291Z","iopub.execute_input":"2025-04-10T21:45:30.680672Z","iopub.status.idle":"2025-04-10T21:46:20.116608Z","shell.execute_reply.started":"2025-04-10T21:45:30.680636Z","shell.execute_reply":"2025-04-10T21:46:20.115490Z"}},"outputs":[{"name":"stdout","text":"RF Classification best params:  {'algorithm': 'auto', 'leaf_size': 10, 'n_neighbors': 5, 'p': 2, 'weights': 'distance'}\nTuned Classification accuracy:  0.9888888888888889\nRF Regression best params:  {'n_estimators': 100, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_features': 'log2', 'max_depth': 40}\nTuned Regression mae:  18440.296678082195\n","output_type":"stream"}],"execution_count":11},{"cell_type":"markdown","source":"* ## As a result, the best result of KNeighborsClassifier remains unchanged with GridSearchCV so there is no improvement in the best result. RandomForestRegressor had given its best results as 17699.195 and has given worse with RandomizedSearchCV. ","metadata":{}},{"cell_type":"markdown","source":"## B: Explore a New Dataset with Random Forests (Regression or Classification)\n* ### Choose a new dataset: Find a publicly available dataset suitable for either regression or classification (Kaggle, UCI Machine Learning Repository, etc.). Ensure it's manageable in size and complexity.\n* ### Data Preparation: Load and prepare your chosen dataset: data cleaning, feature selection, handling missing values, train/validation split.","metadata":{}},{"cell_type":"code","source":"import pandas as pd\ndf_vehicle = pd.read_csv(\"/kaggle/input/vehicle-dataset-from-cardekho/car data.csv\")\ndf_vehicle.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:46:20.117710Z","iopub.execute_input":"2025-04-10T21:46:20.118090Z","iopub.status.idle":"2025-04-10T21:46:20.147924Z","shell.execute_reply.started":"2025-04-10T21:46:20.118042Z","shell.execute_reply":"2025-04-10T21:46:20.146865Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"  Car_Name  Year  Selling_Price  Present_Price  Kms_Driven Fuel_Type  \\\n0     ritz  2014           3.35           5.59       27000    Petrol   \n1      sx4  2013           4.75           9.54       43000    Diesel   \n2     ciaz  2017           7.25           9.85        6900    Petrol   \n3  wagon r  2011           2.85           4.15        5200    Petrol   \n4    swift  2014           4.60           6.87       42450    Diesel   \n\n  Seller_Type Transmission  Owner  \n0      Dealer       Manual      0  \n1      Dealer       Manual      0  \n2      Dealer       Manual      0  \n3      Dealer       Manual      0  \n4      Dealer       Manual      0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Car_Name</th>\n      <th>Year</th>\n      <th>Selling_Price</th>\n      <th>Present_Price</th>\n      <th>Kms_Driven</th>\n      <th>Fuel_Type</th>\n      <th>Seller_Type</th>\n      <th>Transmission</th>\n      <th>Owner</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ritz</td>\n      <td>2014</td>\n      <td>3.35</td>\n      <td>5.59</td>\n      <td>27000</td>\n      <td>Petrol</td>\n      <td>Dealer</td>\n      <td>Manual</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>sx4</td>\n      <td>2013</td>\n      <td>4.75</td>\n      <td>9.54</td>\n      <td>43000</td>\n      <td>Diesel</td>\n      <td>Dealer</td>\n      <td>Manual</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ciaz</td>\n      <td>2017</td>\n      <td>7.25</td>\n      <td>9.85</td>\n      <td>6900</td>\n      <td>Petrol</td>\n      <td>Dealer</td>\n      <td>Manual</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>wagon r</td>\n      <td>2011</td>\n      <td>2.85</td>\n      <td>4.15</td>\n      <td>5200</td>\n      <td>Petrol</td>\n      <td>Dealer</td>\n      <td>Manual</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>swift</td>\n      <td>2014</td>\n      <td>4.60</td>\n      <td>6.87</td>\n      <td>42450</td>\n      <td>Diesel</td>\n      <td>Dealer</td>\n      <td>Manual</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"df_vehicle.shape # (301, 9)\ndf_vehicle.info() # there is no null","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:46:20.151139Z","iopub.execute_input":"2025-04-10T21:46:20.151454Z","iopub.status.idle":"2025-04-10T21:46:20.173140Z","shell.execute_reply.started":"2025-04-10T21:46:20.151427Z","shell.execute_reply":"2025-04-10T21:46:20.171858Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 301 entries, 0 to 300\nData columns (total 9 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   Car_Name       301 non-null    object \n 1   Year           301 non-null    int64  \n 2   Selling_Price  301 non-null    float64\n 3   Present_Price  301 non-null    float64\n 4   Kms_Driven     301 non-null    int64  \n 5   Fuel_Type      301 non-null    object \n 6   Seller_Type    301 non-null    object \n 7   Transmission   301 non-null    object \n 8   Owner          301 non-null    int64  \ndtypes: float64(2), int64(3), object(4)\nmemory usage: 21.3+ KB\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"df_vehicle.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:46:20.174613Z","iopub.execute_input":"2025-04-10T21:46:20.174931Z","iopub.status.idle":"2025-04-10T21:46:20.211556Z","shell.execute_reply.started":"2025-04-10T21:46:20.174902Z","shell.execute_reply":"2025-04-10T21:46:20.210494Z"}},"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"         Year  Selling_Price  Present_Price  Kms_Driven  Owner\ncount  301.00         301.00         301.00      301.00 301.00\nmean  2013.63           4.66           7.63    36947.21   0.04\nstd      2.89           5.08           8.64    38886.88   0.25\nmin   2003.00           0.10           0.32      500.00   0.00\n25%   2012.00           0.90           1.20    15000.00   0.00\n50%   2014.00           3.60           6.40    32000.00   0.00\n75%   2016.00           6.00           9.90    48767.00   0.00\nmax   2018.00          35.00          92.60   500000.00   3.00","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Selling_Price</th>\n      <th>Present_Price</th>\n      <th>Kms_Driven</th>\n      <th>Owner</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>301.00</td>\n      <td>301.00</td>\n      <td>301.00</td>\n      <td>301.00</td>\n      <td>301.00</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2013.63</td>\n      <td>4.66</td>\n      <td>7.63</td>\n      <td>36947.21</td>\n      <td>0.04</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2.89</td>\n      <td>5.08</td>\n      <td>8.64</td>\n      <td>38886.88</td>\n      <td>0.25</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>2003.00</td>\n      <td>0.10</td>\n      <td>0.32</td>\n      <td>500.00</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2012.00</td>\n      <td>0.90</td>\n      <td>1.20</td>\n      <td>15000.00</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2014.00</td>\n      <td>3.60</td>\n      <td>6.40</td>\n      <td>32000.00</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2016.00</td>\n      <td>6.00</td>\n      <td>9.90</td>\n      <td>48767.00</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2018.00</td>\n      <td>35.00</td>\n      <td>92.60</td>\n      <td>500000.00</td>\n      <td>3.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":14},{"cell_type":"markdown","source":"## Data Preprocessing","metadata":{}},{"cell_type":"markdown","source":"* ### Univariate Analysis","metadata":{}},{"cell_type":"code","source":"## There is no missing values.\n# Let's find Age of cars:\ndf_vehicle[\"Age\"] = 2025 - df_vehicle[\"Year\"]\ndf_vehicle.drop(\"Year\", axis=1, inplace=True)\ndf_vehicle.select_dtypes(include=\"object\").columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:46:20.212864Z","iopub.execute_input":"2025-04-10T21:46:20.213277Z","iopub.status.idle":"2025-04-10T21:46:20.223277Z","shell.execute_reply.started":"2025-04-10T21:46:20.213240Z","shell.execute_reply":"2025-04-10T21:46:20.222168Z"}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"Index(['Car_Name', 'Fuel_Type', 'Seller_Type', 'Transmission'], dtype='object')"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sbn\ncat_cols = df_vehicle.select_dtypes(include=\"object\").columns.tolist()\ncat_cols.append(\"Owner\")\ncat_cols = [col for col in cat_cols if col != \"Car_Name\"]\ni=0\nwhile i < 4:\n    fig = plt.figure(figsize=[10,4])\n    #ax1 = fig.add_subplot(121)\n    #ax2 = fig.add_subplot(122)\n    \n    #ax1.title.set_text(cat_cols[i])\n    plt.subplot(1,2,1)\n    sbn.countplot(x=cat_cols[i], data=df_vehicle)\n    i += 1\n    \n    #ax2.title.set_text(cat_cols[i])\n    plt.subplot(1,2,2)\n    sbn.countplot(x=cat_cols[i], data=df_vehicle)\n    i += 1\n    \n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:46:20.224472Z","iopub.execute_input":"2025-04-10T21:46:20.224886Z","iopub.status.idle":"2025-04-10T21:46:21.232880Z","shell.execute_reply.started":"2025-04-10T21:46:20.224848Z","shell.execute_reply":"2025-04-10T21:46:21.231959Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 2 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"num_cols = df_vehicle.select_dtypes(exclude = \"object\").columns.tolist()\nnum_cols = [col for col in num_cols if col != \"Owner\"]\n\ni=0\nwhile i < 4:\n    fig = plt.figure(figsize=[13,3])\n    ax1 = fig.add_subplot(121)\n    ax2 = fig.add_subplot(122)\n    \n    ax1.title.set_text(num_cols[i])\n    plt.subplot(1, 2, 1)\n    sbn.boxplot(x=num_cols[i], data = df_vehicle)\n    i += 1\n    \n    ax2.title.set_text(num_cols[i])\n    plt.subplot(1, 2, 2)\n    sbn.boxplot(x=num_cols[i], data = df_vehicle)\n    i += 1\n    \n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:46:21.233856Z","iopub.execute_input":"2025-04-10T21:46:21.234673Z","iopub.status.idle":"2025-04-10T21:46:21.702922Z","shell.execute_reply.started":"2025-04-10T21:46:21.234642Z","shell.execute_reply":"2025-04-10T21:46:21.701497Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1300x300 with 2 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1300x300 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"df_vehicle.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:46:21.703903Z","iopub.execute_input":"2025-04-10T21:46:21.704210Z","iopub.status.idle":"2025-04-10T21:46:21.726714Z","shell.execute_reply.started":"2025-04-10T21:46:21.704182Z","shell.execute_reply":"2025-04-10T21:46:21.725827Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"       Selling_Price  Present_Price  Kms_Driven  Owner    Age\ncount         301.00         301.00      301.00 301.00 301.00\nmean            4.66           7.63    36947.21   0.04  11.37\nstd             5.08           8.64    38886.88   0.25   2.89\nmin             0.10           0.32      500.00   0.00   7.00\n25%             0.90           1.20    15000.00   0.00   9.00\n50%             3.60           6.40    32000.00   0.00  11.00\n75%             6.00           9.90    48767.00   0.00  13.00\nmax            35.00          92.60   500000.00   3.00  22.00","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Selling_Price</th>\n      <th>Present_Price</th>\n      <th>Kms_Driven</th>\n      <th>Owner</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>301.00</td>\n      <td>301.00</td>\n      <td>301.00</td>\n      <td>301.00</td>\n      <td>301.00</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>4.66</td>\n      <td>7.63</td>\n      <td>36947.21</td>\n      <td>0.04</td>\n      <td>11.37</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>5.08</td>\n      <td>8.64</td>\n      <td>38886.88</td>\n      <td>0.25</td>\n      <td>2.89</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.10</td>\n      <td>0.32</td>\n      <td>500.00</td>\n      <td>0.00</td>\n      <td>7.00</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.90</td>\n      <td>1.20</td>\n      <td>15000.00</td>\n      <td>0.00</td>\n      <td>9.00</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3.60</td>\n      <td>6.40</td>\n      <td>32000.00</td>\n      <td>0.00</td>\n      <td>11.00</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>6.00</td>\n      <td>9.90</td>\n      <td>48767.00</td>\n      <td>0.00</td>\n      <td>13.00</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>35.00</td>\n      <td>92.60</td>\n      <td>500000.00</td>\n      <td>3.00</td>\n      <td>22.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"for col in num_cols:\n    print(f\"{col} 0.99:\\n {df_vehicle[df_vehicle[col] > df_vehicle[col].quantile(0.99)]} \\n\")\n    print(f\"{col} 0.01:\\n {df_vehicle[df_vehicle[col] < df_vehicle[col].quantile(0.01)]} \\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:46:21.727780Z","iopub.execute_input":"2025-04-10T21:46:21.728052Z","iopub.status.idle":"2025-04-10T21:46:21.768156Z","shell.execute_reply.started":"2025-04-10T21:46:21.728030Z","shell.execute_reply":"2025-04-10T21:46:21.767178Z"}},"outputs":[{"name":"stdout","text":"Selling_Price 0.99:\n         Car_Name  Selling_Price  Present_Price  Kms_Driven Fuel_Type  \\\n63      fortuner          23.50          35.96       47000    Diesel   \n64      fortuner          33.00          36.23        6000    Diesel   \n86  land cruiser          35.00          92.60       78000    Diesel   \n\n   Seller_Type Transmission  Owner  Age  \n63      Dealer    Automatic      0   10  \n64      Dealer    Automatic      0    8  \n86      Dealer       Manual      0   15   \n\nSelling_Price 0.01:\n                Car_Name  Selling_Price  Present_Price  Kms_Driven Fuel_Type  \\\n198  Bajaj Discover 125           0.15           0.57       35000    Petrol   \n199      Honda CB Shine           0.12           0.58       53000    Petrol   \n200    Bajaj Pulsar 150           0.10           0.75       92233    Petrol   \n\n    Seller_Type Transmission  Owner  Age  \n198  Individual       Manual      1   14  \n199  Individual       Manual      0   18  \n200  Individual       Manual      0   19   \n\nPresent_Price 0.99:\n         Car_Name  Selling_Price  Present_Price  Kms_Driven Fuel_Type  \\\n64      fortuner          33.00          36.23        6000    Diesel   \n86  land cruiser          35.00          92.60       78000    Diesel   \n\n   Seller_Type Transmission  Owner  Age  \n64      Dealer    Automatic      0    8  \n86      Dealer       Manual      0   15   \n\nPresent_Price 0.01:\n                Car_Name  Selling_Price  Present_Price  Kms_Driven Fuel_Type  \\\n181  Hero Splender Plus           0.30           0.48       50000    Petrol   \n183  Bajaj Discover 100           0.27           0.47       21000    Petrol   \n195       Bajaj  ct 100           0.18           0.32       35000    Petrol   \n\n    Seller_Type Transmission  Owner  Age  \n181  Individual       Manual      0    9  \n183  Individual       Manual      0   12  \n195  Individual       Manual      0   10   \n\nKms_Driven 0.99:\n           Car_Name  Selling_Price  Present_Price  Kms_Driven Fuel_Type  \\\n84          innova           3.49          13.46      197176    Diesel   \n179  Honda Karizma           0.31           1.05      213000    Petrol   \n196      Activa 3g           0.17           0.52      500000    Petrol   \n\n    Seller_Type Transmission  Owner  Age  \n84       Dealer       Manual      0   20  \n179  Individual       Manual      0   15  \n196  Individual    Automatic      0   17   \n\nKms_Driven 0.01:\n               Car_Name  Selling_Price  Present_Price  Kms_Driven Fuel_Type  \\\n133  Bajaj Avenger 220           0.72           0.95         500    Petrol   \n165          Activa 3g           0.45           0.54         500    Petrol   \n166   Hero Passion Pro           0.45           0.55        1000    Petrol   \n\n    Seller_Type Transmission  Owner  Age  \n133  Individual       Manual      0    9  \n165  Individual    Automatic      0    9  \n166  Individual       Manual      0    9   \n\nAge 0.99:\n    Car_Name  Selling_Price  Present_Price  Kms_Driven Fuel_Type Seller_Type  \\\n37      800           0.35           2.28      127000    Petrol  Individual   \n39      sx4           2.25           7.98       62000    Petrol      Dealer   \n77  corolla           1.50          12.35      135154    Petrol      Dealer   \n\n   Transmission  Owner  Age  \n37       Manual      0   22  \n39       Manual      0   22  \n77    Automatic      0   21   \n\nAge 0.01:\n         Car_Name  Selling_Price  Present_Price  Kms_Driven Fuel_Type  \\\n5  vitara brezza           9.25           9.83        2071    Diesel   \n\n  Seller_Type Transmission  Owner  Age  \n5      Dealer       Manual      0    7   \n\n","output_type":"stream"}],"execution_count":19},{"cell_type":"markdown","source":"* ### Bivariate/Multi-Variate Analysis","metadata":{}},{"cell_type":"code","source":"heatmap = sbn.heatmap(df_vehicle[num_cols].corr(), annot=True, cmap=\"RdBu\")\nheatmap.set_xticklabels(heatmap.get_xticklabels(), rotation=90) # Rotate x-axis to 90 for vertical\nheatmap.set_yticklabels(heatmap.get_yticklabels(), rotation=0) # Rotate y-axis to 0 for horizontal\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:46:21.769010Z","iopub.execute_input":"2025-04-10T21:46:21.769304Z","iopub.status.idle":"2025-04-10T21:46:22.023511Z","shell.execute_reply.started":"2025-04-10T21:46:21.769281Z","shell.execute_reply":"2025-04-10T21:46:22.022481Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":20},{"cell_type":"code","source":"cat_cols","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:46:22.024615Z","iopub.execute_input":"2025-04-10T21:46:22.025006Z","iopub.status.idle":"2025-04-10T21:46:22.030988Z","shell.execute_reply.started":"2025-04-10T21:46:22.024969Z","shell.execute_reply":"2025-04-10T21:46:22.030179Z"}},"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"['Fuel_Type', 'Seller_Type', 'Transmission', 'Owner']"},"metadata":{}}],"execution_count":21},{"cell_type":"code","source":"## Let's look at cat_cols' relationships with Selling_Price\ni = 0\nwhile i < len(cat_cols)-1:\n    for j in range(i+1, len(cat_cols)):\n        print(df_vehicle.pivot_table(values=\"Selling_Price\", index=cat_cols[i], columns = cat_cols[j]))\n        print()\n    i += 1","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:46:22.032124Z","iopub.execute_input":"2025-04-10T21:46:22.032515Z","iopub.status.idle":"2025-04-10T21:46:22.107399Z","shell.execute_reply.started":"2025-04-10T21:46:22.032487Z","shell.execute_reply":"2025-04-10T21:46:22.106352Z"}},"outputs":[{"name":"stdout","text":"Seller_Type  Dealer  Individual\nFuel_Type                      \nCNG            3.10         NaN\nDiesel        10.18       16.00\nPetrol         5.25        0.73\n\nTransmission  Automatic  Manual\nFuel_Type                      \nCNG                 NaN    3.10\nDiesel            20.70    7.67\nPetrol             4.59    3.09\n\nOwner         0    1    3\nFuel_Type                \nCNG        3.10  NaN  NaN\nDiesel    10.40 3.25  NaN\nPetrol     3.32 1.83 2.50\n\nTransmission  Automatic  Manual\nSeller_Type                    \nDealer            12.25    5.76\nIndividual         1.97    0.74\n\nOwner          0    1    3\nSeller_Type               \nDealer      6.77 4.34  NaN\nIndividual  0.88 0.39 2.50\n\nOwner           0    1    3\nTransmission               \nAutomatic    9.60  NaN 2.50\nManual       4.01 1.97  NaN\n\n","output_type":"stream"}],"execution_count":22},{"cell_type":"markdown","source":"## Data Preparation","metadata":{}},{"cell_type":"code","source":"# Drop Car_Name as it is not useful\ndf_vehicle.drop(\"Car_Name\", axis=1, inplace=True)\n# One hot encoding to convert cats to nums\ndf_vehicle = pd.get_dummies(data = df_vehicle, drop_first=True)\nbool_cols = df_vehicle.select_dtypes(include=['bool']).columns\ndf_vehicle[bool_cols] = df_vehicle[bool_cols].astype(int)\ndf_vehicle.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:46:22.108303Z","iopub.execute_input":"2025-04-10T21:46:22.108700Z","iopub.status.idle":"2025-04-10T21:46:22.127864Z","shell.execute_reply.started":"2025-04-10T21:46:22.108671Z","shell.execute_reply":"2025-04-10T21:46:22.126705Z"}},"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"   Selling_Price  Present_Price  Kms_Driven  Owner  Age  Fuel_Type_Diesel  \\\n0           3.35           5.59       27000      0   11                 0   \n1           4.75           9.54       43000      0   12                 1   \n2           7.25           9.85        6900      0    8                 0   \n3           2.85           4.15        5200      0   14                 0   \n4           4.60           6.87       42450      0   11                 1   \n\n   Fuel_Type_Petrol  Seller_Type_Individual  Transmission_Manual  \n0                 1                       0                    1  \n1                 0                       0                    1  \n2                 1                       0                    1  \n3                 1                       0                    1  \n4                 0                       0                    1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Selling_Price</th>\n      <th>Present_Price</th>\n      <th>Kms_Driven</th>\n      <th>Owner</th>\n      <th>Age</th>\n      <th>Fuel_Type_Diesel</th>\n      <th>Fuel_Type_Petrol</th>\n      <th>Seller_Type_Individual</th>\n      <th>Transmission_Manual</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3.35</td>\n      <td>5.59</td>\n      <td>27000</td>\n      <td>0</td>\n      <td>11</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4.75</td>\n      <td>9.54</td>\n      <td>43000</td>\n      <td>0</td>\n      <td>12</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7.25</td>\n      <td>9.85</td>\n      <td>6900</td>\n      <td>0</td>\n      <td>8</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2.85</td>\n      <td>4.15</td>\n      <td>5200</td>\n      <td>0</td>\n      <td>14</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4.60</td>\n      <td>6.87</td>\n      <td>42450</td>\n      <td>0</td>\n      <td>11</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":23},{"cell_type":"markdown","source":"### Handle the outliers","metadata":{}},{"cell_type":"code","source":"def outlier_thresholds(df, col_name, q1=0.25, q3=0.75):\n    quartile1 = df[col_name].quantile(q1)\n    quartile3 = df[col_name].quantile(q3)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5*interquantile_range\n    low_limit = quartile1 - 1.5*interquantile_range\n    return low_limit, up_limit\n\ndef check_outlier(df, col_name):\n    low_limit, up_limit = outlier_thresholds(df, col_name)\n    if df[(df[col_name]<low_limit) | df[col_name]>up_limit].any(axis=None):\n        return True\n    else:\n        return False\n\nfor col in num_cols:\n    print(f\"{col}: {check_outlier(df_vehicle, col)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:46:22.129036Z","iopub.execute_input":"2025-04-10T21:46:22.129380Z","iopub.status.idle":"2025-04-10T21:46:22.158189Z","shell.execute_reply.started":"2025-04-10T21:46:22.129353Z","shell.execute_reply":"2025-04-10T21:46:22.157125Z"}},"outputs":[{"name":"stdout","text":"Selling_Price: False\nPresent_Price: False\nKms_Driven: False\nAge: False\n","output_type":"stream"}],"execution_count":24},{"cell_type":"markdown","source":"* ### There is no outliers so no need to touch data and no need to apply Local Outlier Factor(LOF).","metadata":{}},{"cell_type":"markdown","source":"### Train-Test Split","metadata":{}},{"cell_type":"code","source":"y = df_vehicle[\"Selling_Price\"]\nX = df_vehicle.drop(\"Selling_Price\", axis=1)\n\nfrom sklearn.model_selection import train_test_split\nX_train,  X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=21)\nprint(\"x train: \",X_train.shape)\nprint(\"x test: \",X_test.shape)\nprint(\"y train: \",y_train.shape)\nprint(\"y test: \",y_test.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:46:22.159313Z","iopub.execute_input":"2025-04-10T21:46:22.159689Z","iopub.status.idle":"2025-04-10T21:46:22.169975Z","shell.execute_reply.started":"2025-04-10T21:46:22.159653Z","shell.execute_reply":"2025-04-10T21:46:22.168969Z"}},"outputs":[{"name":"stdout","text":"x train:  (240, 8)\nx test:  (61, 8)\ny train:  (240,)\ny test:  (61,)\n","output_type":"stream"}],"execution_count":25},{"cell_type":"markdown","source":"\n* **Random Forest Modeling and Bagging Comparison:** Choose either RandomForestRegressor or RandomForestClassifier and train a baseline model (default hyperparameters) on your new dataset.Train a Bagging ensemble using Decision Tree as the base estimator on your new dataset.Evaluate and compare the performance of the Random Forest and Bagging Decision Tree models using appropriate metrics.Perform basic hyperparameter tuning (at least for n_estimators and max_depth) for the Random Forest on your new dataset to try to optimize performance.","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestRegressor, BaggingRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_squared_error\n\nRforest_model = RandomForestRegressor(random_state=21)\nRforest_model.fit(X_train, y_train)\nRF_predictions = Rforest_model.predict(X_test)\nRforest_Rmse = mean_squared_error(y_test, RF_predictions, squared=False)\nprint(f\"Random Forest RMSE: {Rforest_Rmse}\")\n\nDTree_model = BaggingRegressor(base_estimator=DecisionTreeRegressor(), random_state=21)\nDTree_model.fit(X_train, y_train)\nDT_predictions = DTree_model.predict(X_test)\nDTree_Rmse = mean_squared_error(y_test, DT_predictions, squared=False)\nprint(f\"Decision Tree RMSE: {DTree_Rmse}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:46:22.170934Z","iopub.execute_input":"2025-04-10T21:46:22.171290Z","iopub.status.idle":"2025-04-10T21:46:22.393828Z","shell.execute_reply.started":"2025-04-10T21:46:22.171247Z","shell.execute_reply":"2025-04-10T21:46:22.392843Z"}},"outputs":[{"name":"stdout","text":"Random Forest RMSE: 0.7528792631744036\nDecision Tree RMSE: 0.8842714329961784\n","output_type":"stream"}],"execution_count":26},{"cell_type":"markdown","source":"* **Feature Importance Analysis:** Perform feature importance analysis for your Random Forest model on the new dataset, visualize importances, and interpret results in the context of your dataset.","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nfeature_importances = pd.DataFrame({\"Value\":Rforest_model.feature_importances_, \"Feature\": X_train.columns})\nplt.figure(figsize=(10,5))\nsbn.set(font_scale=1)\nsbn.barplot(x=\"Value\", y=\"Feature\", data=feature_importances.sort_values(by=\"Value\", ascending=False))\nplt.title(\"Features\")\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:46:22.394791Z","iopub.execute_input":"2025-04-10T21:46:22.395153Z","iopub.status.idle":"2025-04-10T21:46:22.729010Z","shell.execute_reply.started":"2025-04-10T21:46:22.395124Z","shell.execute_reply":"2025-04-10T21:46:22.727884Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x500 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":27},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"* ### Present_Price dominates Selling_Price of the cars. Age and Kms_Driven are following features to impact the price of the cars.","metadata":{}},{"cell_type":"markdown","source":"## C: (Optional) Explore Bagging with Other Base Estimators (Expanded)\n\n\n* Select either the House Price Regression task OR the Digits Classification task from this module.\n* **Experiment with Bagging and Different Base Estimators (Expanded):**\n    \n    * Choose at least three different base estimators from scikit-learn other than Decision Trees, Linear Regression, Logistic Regression, KNN.\n    * For each chosen base estimator, create a Bagging ensemble using BaggingRegressor (or BaggingClassifier). Train and evaluate these Bagging ensembles on your chosen dataset (House Prices or Digits).\n    * Create at least two different Bagging ensembles with mixed base estimators. Experiment with different combinations of base estimators in your mixed ensembles (e.g., combine Decision Trees with two different new base estimators, or create a mix of three or four different types). Train and evaluate these mixed ensembles.\n    * Compare the performance of all your Bagging ensembles (with different single base estimators and mixed estimators) to the baseline Bagging Decision Tree (or Bagging Logistic Regression) from Module 7 and to Random Forest.\n    * Analyze and explain your findings: Which new base estimators worked well within Bagging? Did any of your mixed ensembles show improved performance? What are your overall conclusions about the versatility of Bagging and the impact of base estimator choices, especially when exploring less common base estimator types within Bagging?\n","metadata":{}},{"cell_type":"code","source":"from sklearn.neighbors import KNeighborsRegressor\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.tree import ExtraTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, BaggingRegressor, GradientBoostingRegressor\nfrom sklearn.svm import SVR\n\nhouse_df = pd.read_csv(\"/kaggle/input/house-prices-advanced-regression-techniques/train.csv\")\ny = house_df[\"SalePrice\"]\nnumeric_features = house_df.select_dtypes(include=np.number)\nX = numeric_features.drop(\"SalePrice\", axis=1)\nimputer = SimpleImputer(strategy=\"mean\")\nX = imputer.fit_transform(X)\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=21)\n\n# Base Estimators for Bagging\nRFbagg_reg = BaggingRegressor(base_estimator=RandomForestRegressor(), n_estimators=10, random_state=21)\nRFbagg_reg.fit(X_train, y_train)\n\nKNbagg_reg = BaggingRegressor(base_estimator=KNeighborsRegressor(n_neighbors=20), n_estimators=10, random_state=21)\nKNbagg_reg.fit(X_train, y_train)\n\nLGBMbagg_reg = BaggingRegressor(base_estimator=LGBMRegressor(verbosity=0), n_estimators=10, random_state=21)\nLGBMbagg_reg.fit(X_train, y_train)\n\nXGBbagg_reg = BaggingRegressor(base_estimator=XGBRegressor(), n_estimators=10, random_state=21)\nXGBbagg_reg.fit(X_train, y_train)\n\nExtraTbagg_reg = BaggingRegressor(base_estimator=ExtraTreeRegressor(), n_estimators=10, random_state=21)\nExtraTbagg_reg.fit(X_train, y_train)\n\nSVRbagg_reg = BaggingRegressor(base_estimator=SVR(), n_estimators=10, random_state=21)\nSVRbagg_reg.fit(X_train, y_train)\n\n# Mixed Ensembles  \nmixed_reg1 = BaggingRegressor(base_estimator=SVR(), n_estimators=5, random_state=21)\nmixed_reg2 = BaggingRegressor(base_estimator=GradientBoostingRegressor(), n_estimators=5, random_state=21)\n\nmixed_bagging1 = BaggingRegressor(mixed_reg1, n_estimators=5, random_state=21)\nmixed_bagging1.fit(X_train, y_train)\n\nmixed_bagging2 = BaggingRegressor(mixed_reg2, n_estimators=5, random_state=21)\nmixed_bagging2.fit(X_train, y_train)\n\nregressors = [RFbagg_reg, KNbagg_reg, LGBMbagg_reg, XGBbagg_reg, ExtraTbagg_reg, SVRbagg_reg, mixed_bagging1, mixed_bagging2]\nregressors_errors = {}\nfor reg in regressors:\n    predictions = reg.predict(X_val)\n    mae = mean_absolute_error(y_val, predictions)\n    rmse = mean_squared_error(y_val, predictions, squared=False)  # calculate the RMSE\n    print(f\"{reg.__class__.__name__} MAE: {mae}\")\n    print(f\"{reg.__class__.__name__} RMSE: {rmse}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-10T21:50:40.716409Z","iopub.execute_input":"2025-04-10T21:50:40.716829Z","iopub.status.idle":"2025-04-10T21:51:03.253171Z","shell.execute_reply.started":"2025-04-10T21:50:40.716799Z","shell.execute_reply":"2025-04-10T21:51:03.252175Z"}},"outputs":[{"name":"stdout","text":"BaggingRegressor MAE: 17723.126852739722\nBaggingRegressor RMSE: 34390.729144300894\nBaggingRegressor MAE: 32722.982448630137\nBaggingRegressor RMSE: 55477.813810041305\nBaggingRegressor MAE: 16837.676232650352\nBaggingRegressor RMSE: 33285.20194276383\nBaggingRegressor MAE: 16593.198496361303\nBaggingRegressor RMSE: 33401.35247778308\nBaggingRegressor MAE: 19386.516095890413\nBaggingRegressor RMSE: 34770.43537288294\nBaggingRegressor MAE: 56359.35182378995\nBaggingRegressor RMSE: 84258.25151256486\nBaggingRegressor MAE: 56328.35515968761\nBaggingRegressor RMSE: 84517.62284055018\nBaggingRegressor MAE: 17394.708696542166\nBaggingRegressor RMSE: 35012.336144385496\n","output_type":"stream"}],"execution_count":31},{"cell_type":"markdown","source":"## Finally XGBbagg_reg, LGBMbagg_reg and mixed_reg2 with GradientBoostingRegressor passed RandomForestRegressor that having given its best result as 17699.195 and was the best amongst regressors accordingly.","metadata":{}}]}